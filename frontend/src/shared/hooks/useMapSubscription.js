import React, { useEffect, useState, useRef, useCallback } from 'react';

const useMapSubscription = (
  socket,
  mapId,
  handleIncomingMessageRef,
  isHandlerReady
) => {
  useEffect(() => {
    if (!socket || !mapId || !isHandlerReady) return;

    let isSubscribed = false;

    const subscribe = () => {
      if (!isSubscribed && socket.readyState === WebSocket.OPEN) {
        console.log('üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É', mapId);
        socket.send(
          JSON.stringify({
            action: 'subscribe',
            payload: { map_id: mapId },
          })
        );
        isSubscribed = true;
      }
    };

    const handleOpen = () => {
      console.log('üü¢ –°–æ–∫–µ—Ç –æ—Ç–∫—Ä—ã—Ç');
      subscribe();
    };

    const handleMessage = (event) => {
      try {
        const data = JSON.parse(event.data);
        if (typeof handleIncomingMessageRef.current === 'function') {
          handleIncomingMessageRef.current(data);
        } else {
          console.warn('Handler –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ', data);
        }
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
      }
    };

    if (socket.readyState === WebSocket.OPEN) {
      subscribe();
    } else {
      socket.addEventListener('open', handleOpen);
    }

    socket.addEventListener('message', handleMessage);

    return () => {
      socket.removeEventListener('open', handleOpen);
      socket.removeEventListener('message', handleMessage);

      if (socket.readyState === WebSocket.OPEN && isSubscribed) {
        console.log('üì¥ –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –∫–∞—Ä—Ç—ã', mapId);
        socket.send(
          JSON.stringify({
            action: 'unsubscribe',
            payload: { map_id: mapId },
          })
        );
      }
    };
  }, [socket, mapId, isHandlerReady]);
};

export default useMapSubscription;
