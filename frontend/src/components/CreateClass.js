// ClassEditor.jsx ‚Äî —Ä–µ–¥–∞–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è GLORIOUS NOCTURNE
import React, { useState, useEffect } from 'react';
import '../shared/styles/ClassEditor.css';
import { useParams } from 'react-router-dom';
import {
  GetPlayerClasses,
  createClass,
  updateClass,
  deleteClass,
} from '../services/MapService';

const ClassEditor = () => {
  const { id: profileId } = useParams();
  const abilities = [
    '–°–∏–ª–∞',
    '–õ–æ–≤–∫–æ—Å—Ç—å',
    '–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ',
    '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç',
    '–ú—É–¥—Ä–æ—Å—Ç—å',
    '–•–∞—Ä–∏–∑–º–∞',
  ];

  const initialState = {
    name: '',
    hitDice: 'd8',
    primaryStat: [],
    spellcastingAbility: '',
    description: '',
    features: '',
    proficiencies: '',
  };

  const [classData, setClassData] = useState(initialState);
  const [savedClasses, setSavedClasses] = useState([]);
  const [selectedClass, setSelectedClass] = useState(null);

  useEffect(() => {
    if (!profileId) return;
    GetPlayerClasses(profileId)
      .then((res) => setSavedClasses(res.data))
      .catch((err) => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–ª–∞—Å—Å–æ–≤:', err));
  }, [profileId]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setClassData((prev) => ({ ...prev, [name]: value }));
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
  const handleStatChange = (ability) => {
    setClassData((prev) => {
      const newStats = prev.primaryStat.includes(ability)
        ? prev.primaryStat.filter((a) => a !== ability)
        : [...prev.primaryStat, ability];

      return { ...prev, primaryStat: newStats };
    });
  };

  const handleCreate = async () => {
    try {
      const payload = {
        ...classData,
        primary_abilities: classData.primaryStat,
        spellcasting_ability: classData.spellcastingAbility || null,
      };
      const response = await createClass(payload);
      setSavedClasses((prev) => [...prev, response.data]);
      setClassData(initialState);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞—Å—Å–∞:', err);
    }
  };

  const handleUpdate = async (id) => {
    try {
      const payload = {
        ...classData,
        primary_abilities: classData.primaryStat,
        spellcasting_ability: classData.spellcastingAbility || null,
      };
      const response = await updateClass(id, payload);
      setSavedClasses((prev) =>
        prev.map((cls) => (cls.id === id ? response.data : cls))
      );
      setSelectedClass(null);
      setClassData(initialState);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞—Å—Å–∞:', err);
    }
  };

  const handleDelete = async (id) => {
    if (!window.confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–ª–∞—Å—Å?')) return;
    try {
      await deleteClass(id);
      setSavedClasses((prev) => prev.filter((cls) => cls.id !== id));
      if (selectedClass?.id === id) handleReset();
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∞—Å—Å–∞:', err);
    }
  };

  const handleSelectClass = (cls) => {
    setSelectedClass(cls);
    setClassData({
      name: cls.name,
      hitDice: cls.hit_dice,
      primaryStat: cls.primary_abilities || [],
      spellcastingAbility: cls.spellcasting_ability || '',
      description: cls.description || '',
      features: cls.features || '',
      proficiencies: cls.proficiencies || '',
    });
  };

  const handleReset = () => {
    setSelectedClass(null);
    setClassData(initialState);
  };

  return (
    <div className="class-editor-container">
      <div className="class-editor-header">
        <h1>üßô –†–µ–¥–∞–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–æ–≤ D&D</h1>
        <p>–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –≤–∞—à–µ–π –∫–∞–º–ø–∞–Ω–∏–∏</p>
      </div>

      <div className="class-editor-grid">
        <div className="class-form-section">
          <div className="form-section">
            <h3>–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–ª–∞—Å—Å–∞</h3>
            <div className="field-grid">
              <div className="form-group">
                <label htmlFor="name">–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞</label>
                <input
                  id="name"
                  name="name"
                  type="text"
                  placeholder="–ò–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å"
                  value={classData.name}
                  onChange={handleChange}
                />
              </div>

              <div className="form-group">
                <label htmlFor="hitDice">–ö–æ—Å—Ç—å —Ö–∏—Ç–æ–≤</label>
                <select
                  id="hitDice"
                  name="hitDice"
                  value={classData.hitDice}
                  onChange={handleChange}
                >
                  {[6, 8, 10, 12].map((die) => (
                    <option key={die} value={`d${die}`}>{`d${die}`}</option>
                  ))}
                </select>
              </div>

              <div className="form-group">
                <label>–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</label>
                <div className="abilities-grid">
                  {abilities.map((ability) => (
                    <label key={ability} className="ability-option">
                      <input
                        type="checkbox"
                        checked={classData.primaryStat.includes(ability)}
                        onChange={() => handleStatChange(ability)}
                      />
                      {ability}
                    </label>
                  ))}
                </div>
              </div>

              <div className="form-group">
                <label htmlFor="spellcastingAbility">
                  –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π
                </label>
                <select
                  id="spellcastingAbility"
                  name="spellcastingAbility"
                  value={classData.spellcastingAbility}
                  onChange={handleChange}
                >
                  <option value="">‚Äî</option>
                  {abilities.map((ability) => (
                    <option key={ability} value={ability}>
                      {ability}
                    </option>
                  ))}
                </select>
              </div>
            </div>
          </div>

          <div className="form-section">
            <h3>–û–ø–∏—Å–∞–Ω–∏–µ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏</h3>
            <div className="form-group">
              <textarea
                id="description"
                name="description"
                rows="4"
                placeholder="–û–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞..."
                value={classData.description}
                onChange={handleChange}
              />
            </div>
            <div className="form-group">
              <label htmlFor="features">–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏</label>
              <textarea
                id="features"
                name="features"
                rows="3"
                placeholder="–ö–ª—é—á–µ–≤—ã–µ —á–µ—Ä—Ç—ã –∫–ª–∞—Å—Å–∞..."
                value={classData.features}
                onChange={handleChange}
              />
            </div>
            <div className="form-group">
              <label htmlFor="proficiencies">–ù–∞–≤—ã–∫–∏ –∏ –≤–ª–∞–¥–µ–Ω–∏—è</label>
              <textarea
                id="proficiencies"
                name="proficiencies"
                rows="2"
                placeholder="–û—Ä—É–∂–∏–µ, –¥–æ—Å–ø–µ—Ö–∏, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã..."
                value={classData.proficiencies}
                onChange={handleChange}
              />
            </div>
          </div>

          <div className="form-actions">
            {selectedClass ? (
              <>
                <button
                  className="submit-button"
                  onClick={() => handleUpdate(selectedClass.id)}
                >
                  –û–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞—Å—Å
                </button>
                <button className="cancel-button" onClick={handleReset}>
                  –û—Ç–º–µ–Ω–∞
                </button>
              </>
            ) : (
              <button className="submit-button" onClick={handleCreate}>
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª–∞—Å—Å
              </button>
            )}
          </div>
        </div>

        <div className="class-preview-section">
          <h3 className="preview-title">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–ª–∞—Å—Å–∞</h3>
          <div className="class-card">
            <div className="class-header">
              <h2>{classData.name || '–ù–æ–≤—ã–π –∫–ª–∞—Å—Å'}</h2>
            </div>
            <div className="class-meta">
              <span>–ö–æ—Å—Ç—å —Ö–∏—Ç–æ–≤: {classData.hitDice}</span>
              <span>
                –û—Å–Ω. —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:{' '}
                {classData.primaryStat.length
                  ? classData.primaryStat.join(', ')
                  : '‚Äî'}
              </span>
              {classData.spellcastingAbility && (
                <span>–ú–∞–≥–∏—è —á–µ—Ä–µ–∑: {classData.spellcastingAbility}</span>
              )}
            </div>
            <div className="class-description">
              {classData.description || '–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å...'}
            </div>
            {classData.features && (
              <div className="class-features">
                <strong>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</strong> {classData.features}
              </div>
            )}
            {classData.proficiencies && (
              <div className="class-proficiencies">
                <strong>–í–ª–∞–¥–µ–Ω–∏—è:</strong> {classData.proficiencies}
              </div>
            )}
          </div>
        </div>
      </div>

      <div className="saved-classes-section">
        <h3>–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã</h3>
        {savedClasses.length === 0 ? (
          <div className="no-classes">
            <p>–í—ã –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞</p>
          </div>
        ) : (
          <div className="classes-grid">
            {savedClasses.map((cls) => (
              <div
                key={cls.id}
                className={`class-item ${selectedClass?.id === cls.id ? 'active' : ''}`}
                onClick={() => handleSelectClass(cls)}
              >
                <div className="class-item-header">
                  <h4>{cls.name || '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π –∫–ª–∞—Å—Å'}</h4>
                  <span className="class-hit-dice">{cls.hit_dice}</span>
                </div>
                <div className="class-primary-stat">
                  {cls.primary_abilities?.join(', ') || '‚Äî'}
                </div>
                <button
                  className="delete-class"
                  onClick={(e) => {
                    e.stopPropagation();
                    handleDelete(cls.id);
                  }}
                >
                  –£–¥–∞–ª–∏—Ç—å
                </button>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default ClassEditor;
