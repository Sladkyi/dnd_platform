import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import axiosInstance from '../app/axiosInstance';
import { GetPlayerSpells } from '../services/MapService';
import { createSpell, updateSpell } from '../services/MapService';
import { deleteSpellFromServer } from '../services/MapService';

const CreateSpell = () => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è
  const [spell, setSpell] = useState({
    name: '',
    level: 0,
    school: '–≤–æ–ø–ª–æ—â–µ–Ω–∏–µ',
    casting_time: '1 –¥–µ–π—Å—Ç–≤–∏–µ',
    range: '–ù–∞ —Å–µ–±—è',
    duration: '–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ',
    components: '–í',
    materials: '',
    description: '',
    effect: '',
    higher_levels: '',
    is_concentration: false,
    is_ritual: false,
    damage_type: '',
    save_type: '',
    classes: [],
    source: '–î–æ–º–æ—Ä–æ—â–µ–Ω–Ω–æ–µ',
    area_of_effect: '',
  });

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  const [savedSpells, setSavedSpells] = useState([]);
  const [isEditing, setIsEditing] = useState(false);
  const [editId, setEditId] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterLevel, setFilterLevel] = useState('all');
  const [filterSchool, setFilterSchool] = useState('all');
  const [sortBy, setSortBy] = useState('date');
  const { id: profileId } = useParams();

  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤
  const magicSchools = [
    '–≤–æ–ø–ª–æ—â–µ–Ω–∏–µ',
    '–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ',
    '–≤—ã–∑–æ–≤',
    '–ø—Ä–æ—Ä–∏—Ü–∞–Ω–∏–µ',
    '–æ–≥—Ä–∞–∂–¥–µ–Ω–∏–µ',
    '–Ω–µ–∫—Ä–æ–º–∞–Ω—Ç–∏—è',
    '–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
    '–∏–ª–ª—é–∑–∏—è',
  ];

  const damageTypes = [
    '',
    '–∫–∏—Å–ª–æ—Ç–Ω—ã–π',
    '—Ö–æ–ª–æ–¥',
    '–æ–≥–æ–Ω—å',
    '—Å–∏–ª–æ–≤–æ–π',
    '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ',
    '–Ω–µ–∫—Ä–æ—Ç–∏—á–µ—Å–∫–∏–π',
    '—è–¥',
    '–ø—Å–∏—Ö–∏—á–µ—Å–∫–∏–π',
    '–∏–∑–ª—É—á–µ–Ω–∏–µ',
    '–¥—Ä–æ–±—è—â–∏–π',
    '–∫–æ–ª—é—â–∏–π',
    '—Ä—É–±—è—â–∏–π',
  ];

  const saveTypes = [
    '',
    '–°–∏–ª–∞',
    '–õ–æ–≤–∫–æ—Å—Ç—å',
    '–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ',
    '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç',
    '–ú—É–¥—Ä–æ—Å—Ç—å',
    '–•–∞—Ä–∏–∑–º–∞',
  ];

  const classesList = [
    '–ë–∞—Ä–¥',
    '–í–æ–ª—à–µ–±–Ω–∏–∫',
    '–î—Ä—É–∏–¥',
    '–ñ—Ä–µ—Ü',
    '–ö–æ–ª–¥—É–Ω',
    '–ü–∞–ª–∞–¥–∏–Ω',
    '–°–ª–µ–¥–æ–ø—ã—Ç',
    '–ß–∞—Ä–æ–¥–µ–π',
    '–ò–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å',
    '–ú–∏—Å—Ç–∏–∫',
  ];

  const areaTypes = ['', '–ö–æ–Ω—É—Å', '–ö—É–±', '–¶–∏–ª–∏–Ω–¥—Ä', '–õ–∏–Ω–∏—è', '–°—Ñ–µ—Ä–∞', '–ö—Ä—É–≥'];

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π
  useEffect(() => {
    if (!profileId) return;

    GetPlayerSpells(profileId)
      .then((res) => setSavedSpells(res.data))
      .catch((err) => console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π:', err));
  }, [profileId]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–µ
  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setSpell((prev) => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value,
    }));
  };

  const CreateNewSpell = async (e) => {
    e.preventDefault();
    if (!spell.name.trim() || !spell.description.trim()) {
      alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è');
      return;
    }

    const payload = {
      ...spell,
    };

    try {
      if (isEditing) {
        await updateSpell(editId, payload);
      } else {
        await createSpell(payload);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π
      const res = await GetPlayerSpells(profileId);
      setSavedSpells(res.data);

      resetForm();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º—É.');
    }
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤
  const handleClassToggle = (className) => {
    setSpell((prev) => ({
      ...prev,
      classes: prev.classes.includes(className)
        ? prev.classes.filter((c) => c !== className)
        : [...prev.classes, className],
    }));
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  const handleComponentToggle = (component) => {
    setSpell((prev) => ({
      ...prev,
      components: prev.components.includes(component)
        ? prev.components.replace(component, '')
        : prev.components + component,
    }));
  };

  // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
  const resetForm = () => {
    setSpell({
      name: '',
      level: 0,
      school: '–≤–æ–ø–ª–æ—â–µ–Ω–∏–µ',
      casting_time: '1 –¥–µ–π—Å—Ç–≤–∏–µ',
      range: '–ù–∞ —Å–µ–±—è',
      duration: '–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ',
      components: '–í',
      materials: '',
      description: '',
      effect: '',
      higher_levels: '',
      is_concentration: false,
      is_ritual: false,
      damage_type: '',
      save_type: '',
      classes: [],
      source: '–î–æ–º–æ—Ä–æ—â–µ–Ω–Ω–æ–µ',
      area_of_effect: '',
    });
    setIsEditing(false);
    setEditId(null);
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const loadSpell = (spellToLoad) => {
    setSpell(spellToLoad);
    setIsEditing(true);
    setEditId(spellToLoad.id);
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è
  const deleteSpell = async (id, e) => {
    e.stopPropagation();

    try {
      await deleteSpellFromServer(id);
      const updatedSpells = savedSpells.filter((s) => s.id !== id);
      setSavedSpells(updatedSpells);

      if (isEditing && id === editId) {
        resetForm();
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è:', err);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ.');
    }
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π
  const filteredSpells = savedSpells
    .filter((spell) => {
      const matchesSearch = spell.name
        .toLowerCase()
        .includes(searchTerm.toLowerCase());
      const matchesLevel =
        filterLevel === 'all' || spell.level.toString() === filterLevel;
      const matchesSchool =
        filterSchool === 'all' || spell.school === filterSchool;
      return matchesSearch && matchesLevel && matchesSchool;
    })
    .sort((a, b) => {
      if (sortBy === 'name') return a.name.localeCompare(b.name);
      if (sortBy === 'level') return a.level - b.level;
      return new Date(b.created) - new Date(a.created);
    });

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è
  const renderSpellLevel = (level) => {
    if (level === 0) return '–ó–∞–≥–æ–≤–æ—Ä';
    if (level === 1) return '1-–π —É—Ä–æ–≤–µ–Ω—å';
    return `${level}-–π —É—Ä–æ–≤–µ–Ω—å`;
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  const renderComponents = (components, materials) => {
    return components
      .split('')
      .map((c) => {
        if (c === '–í') return '–í–µ—Ä–±–∞–ª—å–Ω—ã–π';
        if (c === '–°') return '–°–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π';
        if (c === '–ú')
          return `–ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–π${materials ? ` (${materials})` : ''}`;
        return '';
      })
      .filter(Boolean)
      .join(', ');
  };

  return (
    <div className="spell-editor-container">
      <header className="spell-editor-header">
        <h1>üìú –†–µ–¥–∞–∫—Ç–æ—Ä –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π D&D 5e</h1>
        <p>–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è–º–∏</p>
      </header>

      <div className="spell-editor-grid">
        {/* –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
        <div className="spell-form-section">
          <form className="spell-form" onSubmit={CreateNewSpell}>
            {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <div className="form-section">
              <h3>üìå –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
              <div className="form-group">
                <label>–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è *</label>
                <input
                  type="text"
                  name="name"
                  placeholder="–û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä"
                  value={spell.name}
                  onChange={handleChange}
                  required
                />
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label>–£—Ä–æ–≤–µ–Ω—å *</label>
                  <select
                    name="level"
                    value={spell.level}
                    onChange={handleChange}
                    required
                  >
                    {[0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map((lvl) => (
                      <option key={lvl} value={lvl}>
                        {lvl === 0 ? '–ó–∞–≥–æ–≤–æ—Ä' : `${lvl}-–π —É—Ä–æ–≤–µ–Ω—å`}
                      </option>
                    ))}
                  </select>
                </div>

                <div className="form-group">
                  <label>–®–∫–æ–ª–∞ –º–∞–≥–∏–∏ *</label>
                  <select
                    name="school"
                    value={spell.school}
                    onChange={handleChange}
                    required
                  >
                    {magicSchools.map((school) => (
                      <option key={school} value={school}>
                        {school.charAt(0).toUpperCase() + school.slice(1)}
                      </option>
                    ))}
                  </select>
                </div>
              </div>
            </div>

            {/* –î–µ—Ç–∞–ª–∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è */}
            <div className="form-section">
              <h3>üìú –î–µ—Ç–∞–ª–∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è</h3>
              <div className="form-row">
                <div className="form-group">
                  <label>–í—Ä–µ–º—è –Ω–∞–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è *</label>
                  <input
                    type="text"
                    name="casting_time"
                    placeholder="1 –¥–µ–π—Å—Ç–≤–∏–µ, 1 –±–æ–Ω—É—Å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏ —Ç.–¥."
                    value={spell.casting_time}
                    onChange={handleChange}
                    required
                  />
                </div>

                <div className="form-group">
                  <label>–î–∏—Å—Ç–∞–Ω—Ü–∏—è *</label>
                  <input
                    type="text"
                    name="range"
                    placeholder="–ù–∞ —Å–µ–±—è, 30 —Ñ—É—Ç–æ–≤ –∏ —Ç.–¥."
                    value={spell.range}
                    onChange={handleChange}
                    required
                  />
                </div>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å *</label>
                  <input
                    type="text"
                    name="duration"
                    placeholder="–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ, 1 —á–∞—Å –∏ —Ç.–¥."
                    value={spell.duration}
                    onChange={handleChange}
                    required
                  />
                </div>

                <div className="form-group">
                  <label>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã *</label>
                  <div className="components-row">
                    {['–í', '–°', '–ú'].map((comp) => (
                      <label key={comp} className="component-checkbox">
                        <input
                          type="checkbox"
                          checked={spell.components.includes(comp)}
                          onChange={() => handleComponentToggle(comp)}
                        />
                        {comp}
                      </label>
                    ))}
                  </div>
                </div>
              </div>

              {spell.components.includes('–ú') && (
                <div className="form-group">
                  <label>–ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã</label>
                  <input
                    type="text"
                    name="materials"
                    placeholder="–©–µ–ø–æ—Ç–∫–∞ –ø–µ–ø–ª–∞, –∞–ª–º–∞–∑ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é 50 –∑–º –∏ —Ç.–¥."
                    value={spell.materials}
                    onChange={handleChange}
                  />
                </div>
              )}
            </div>

            {/* –≠—Ñ—Ñ–µ–∫—Ç—ã –∏ –º–µ—Ö–∞–Ω–∏–∫–∞ */}
            <div className="form-section">
              <h3>üéØ –≠—Ñ—Ñ–µ–∫—Ç—ã –∏ –º–µ—Ö–∞–Ω–∏–∫–∞</h3>
              <div className="form-row">
                <div className="form-group">
                  <label>–¢–∏–ø —É—Ä–æ–Ω–∞</label>
                  <select
                    name="damage_type"
                    value={spell.damage_type}
                    onChange={handleChange}
                  >
                    {damageTypes.map((type) => (
                      <option key={type} value={type}>
                        {type || '–ù–µ –Ω–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω'}
                      </option>
                    ))}
                  </select>
                </div>

                <div className="form-group">
                  <label>–°–ø–∞—Å–±—Ä–æ—Å–æ–∫</label>
                  <select
                    name="save_type"
                    value={spell.save_type}
                    onChange={handleChange}
                  >
                    {saveTypes.map((type) => (
                      <option key={type} value={type}>
                        {type || '–ù–µ —Ç—Ä–µ–±—É–µ—Ç'}
                      </option>
                    ))}
                  </select>
                </div>

                <div className="form-group">
                  <label>–ó–æ–Ω–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞</label>
                  <div className="area-of-effect">
                    <select
                      name="area_of_effect"
                      value={spell.area_of_effect}
                      onChange={handleChange}
                    >
                      {areaTypes.map((type) => (
                        <option key={type} value={type}>
                          {type || '–ù–µ—Ç'}
                        </option>
                      ))}
                    </select>
                    {spell.area_of_effect && (
                      <input
                        type="text"
                        placeholder="–†–∞–∑–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15 —Ñ—É—Ç–æ–≤)"
                        value={spell.area_size || ''}
                        onChange={(e) =>
                          setSpell({ ...spell, area_size: e.target.value })
                        }
                      />
                    )}
                  </div>
                </div>
              </div>

              <div className="form-group">
                <label>–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è *</label>
                <textarea
                  name="description"
                  placeholder="–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –Ω–∞–∫–ª–∞–¥—ã–≤–∞–Ω–∏–∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è..."
                  value={spell.description}
                  onChange={handleChange}
                  required
                  rows={4}
                />
              </div>

              <div className="form-group">
                <label>–ú–µ—Ö–∞–Ω–∏–∫–∞ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è</label>
                <textarea
                  name="effect"
                  placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –º–µ—Ö–∞–Ω–∏–∫—É —Ä–∞–±–æ—Ç—ã (—É—Ä–æ–Ω, —ç—Ñ—Ñ–µ–∫—Ç—ã, —É—Å–ª–æ–≤–∏—è –∏ —Ç.–¥.)"
                  value={spell.effect}
                  onChange={handleChange}
                  rows={3}
                />
              </div>

              <div className="form-group">
                <label>–≠—Ñ—Ñ–µ–∫—Ç –Ω–∞ –≤—ã—Å–æ–∫–∏—Ö —É—Ä–æ–≤–Ω—è—Ö</label>
                <textarea
                  name="higher_levels"
                  placeholder="–ö–∞–∫ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è —è—á–µ–π–∫–æ–π –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è?"
                  value={spell.higher_levels}
                  onChange={handleChange}
                  rows={2}
                />
              </div>
            </div>

            {/* –ö–ª–∞—Å—Å—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã */}
            <div className="form-section">
              <h3>üßô‚Äç‚ôÇÔ∏è –ö–ª–∞—Å—Å—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</h3>
              <div className="form-row">
                <div className="form-group">
                  <label>–ö–ª–∞—Å—Å—ã *</label>
                  <div className="classes-grid">
                    {classesList.map((className) => (
                      <label key={className} className="class-checkbox">
                        <input
                          type="checkbox"
                          checked={spell.classes.includes(className)}
                          onChange={() => handleClassToggle(className)}
                        />
                        {className}
                      </label>
                    ))}
                  </div>
                </div>

                <div className="form-group">
                  <label>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</label>
                  <div className="options-row">
                    <label className="option-checkbox">
                      <input
                        type="checkbox"
                        name="is_concentration"
                        checked={spell.is_concentration}
                        onChange={handleChange}
                      />
                      –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è
                    </label>
                    <label className="option-checkbox">
                      <input
                        type="checkbox"
                        name="is_ritual"
                        checked={spell.is_ritual}
                        onChange={handleChange}
                      />
                      –†–∏—Ç—É–∞–ª
                    </label>
                  </div>
                </div>
              </div>

              <div className="form-group">
                <label>–ò—Å—Ç–æ—á–Ω–∏–∫</label>
                <input
                  type="text"
                  name="source"
                  placeholder="–î–æ–º–æ—Ä–æ—â–µ–Ω–Ω–æ–µ, –ö–Ω–∏–≥–∞ –∏–≥—Ä–æ–∫–∞ –∏ —Ç.–¥."
                  value={spell.source}
                  onChange={handleChange}
                />
              </div>
            </div>

            <div className="form-actions">
              <button type="submit" className="submit-button">
                {isEditing ? '–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ' : '–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ'}
              </button>

              {isEditing && (
                <button
                  type="button"
                  className="cancel-button"
                  onClick={resetForm}
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
              )}
            </div>
          </form>
        </div>

        {/* –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è */}
        <div className="spell-preview-section">
          <div className="spell-card">
            <div className="spell-header">
              <h2>{spell.name || '–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è'}</h2>
              <div className="spell-meta">
                <span>{renderSpellLevel(spell.level)}</span>
                <span>
                  {spell.school.charAt(0).toUpperCase() + spell.school.slice(1)}
                </span>
                {spell.is_ritual && (
                  <span className="ritual-tag">(—Ä–∏—Ç—É–∞–ª)</span>
                )}
              </div>
            </div>

            <div className="spell-details">
              <p>
                <strong>–í—Ä–µ–º—è –Ω–∞–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è:</strong> {spell.casting_time}
              </p>
              <p>
                <strong>–î–∏—Å—Ç–∞–Ω—Ü–∏—è:</strong> {spell.range}
              </p>
              <p>
                <strong>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:</strong>{' '}
                {renderComponents(spell.components, spell.materials)}
              </p>
              <p>
                <strong>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong>{' '}
                {spell.is_concentration
                  ? `–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, –¥–æ ${spell.duration}`
                  : spell.duration}
              </p>
            </div>

            <div className="spell-description">
              <p>
                {spell.description || '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å.'}
              </p>

              {spell.effect && (
                <div className="spell-effect">
                  <p>
                    <strong>–ú–µ—Ö–∞–Ω–∏–∫–∞:</strong> {spell.effect}
                  </p>
                </div>
              )}

              {spell.damage_type && (
                <p>
                  <strong>–¢–∏–ø —É—Ä–æ–Ω–∞:</strong> {spell.damage_type}
                </p>
              )}

              {spell.save_type && (
                <p>
                  <strong>–°–ø–∞—Å–±—Ä–æ—Å–æ–∫:</strong> {spell.save_type}
                </p>
              )}

              {spell.area_of_effect && spell.area_size && (
                <p>
                  <strong>–ó–æ–Ω–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞:</strong> {spell.area_of_effect} (
                  {spell.area_size})
                </p>
              )}

              {spell.higher_levels && (
                <div className="higher-levels">
                  <p>
                    <strong>–ù–∞ –≤—ã—Å–æ–∫–∏—Ö —É—Ä–æ–≤–Ω—è—Ö:</strong> {spell.higher_levels}
                  </p>
                </div>
              )}
            </div>

            <div className="spell-footer">
              {spell.classes.length > 0 && (
                <p>
                  <strong>–î–æ—Å—Ç—É–ø–Ω–æ –∫–ª–∞—Å—Å–∞–º:</strong> {spell.classes.join(', ')}
                </p>
              )}
              {spell.source && (
                <p>
                  <strong>–ò—Å—Ç–æ—á–Ω–∏–∫:</strong> {spell.source}
                </p>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π */}
      <div className="saved-spells-section">
        <div className="spells-controls">
          <h3>üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π ({filteredSpells.length})</h3>

          <div className="controls-row">
            <div className="search-filter">
              <input
                type="text"
                placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />

              <select
                value={filterLevel}
                onChange={(e) => setFilterLevel(e.target.value)}
              >
                <option value="all">–í—Å–µ —É—Ä–æ–≤–Ω–∏</option>
                <option value="0">–ó–∞–≥–æ–≤–æ—Ä—ã</option>
                {[1, 2, 3, 4, 5, 6, 7, 8, 9].map((lvl) => (
                  <option key={lvl} value={lvl}>
                    {lvl}-–π —É—Ä–æ–≤–µ–Ω—å
                  </option>
                ))}
              </select>

              <select
                value={filterSchool}
                onChange={(e) => setFilterSchool(e.target.value)}
              >
                <option value="all">–í—Å–µ —à–∫–æ–ª—ã</option>
                {magicSchools.map((school) => (
                  <option key={school} value={school}>
                    {school.charAt(0).toUpperCase() + school.slice(1)}
                  </option>
                ))}
              </select>

              <select
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value)}
              >
                <option value="date">–°–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ</option>
                <option value="name">–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é</option>
                <option value="level">–ü–æ —É—Ä–æ–≤–Ω—é</option>
              </select>
            </div>
          </div>
        </div>

        {filteredSpells.length === 0 ? (
          <div className="no-spells">
            {savedSpells.length === 0 ? (
              <>
                <p>–í—ã –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è.</p>
                <p>–ù–∞—á–Ω–∏—Ç–µ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –≤—ã—à–µ!</p>
              </>
            ) : (
              <p>–ù–µ—Ç –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.</p>
            )}
          </div>
        ) : (
          <div className="spells-grid">
            {filteredSpells.map((savedSpell) => (
              <div
                key={savedSpell.id}
                className={`spell-item ${editId === savedSpell.id ? 'active' : ''}`}
                onClick={() => loadSpell(savedSpell)}
              >
                <div className="spell-item-header">
                  <h4>{savedSpell.name}</h4>
                  <span className="spell-level">
                    {renderSpellLevel(savedSpell.level)}
                  </span>
                </div>
                <p className="spell-school">
                  {savedSpell.school.charAt(0).toUpperCase() +
                    savedSpell.school.slice(1)}
                  {savedSpell.is_ritual && ' (—Ä–∏—Ç—É–∞–ª)'}
                </p>
                <p className="spell-classes">{savedSpell.classes.join(', ')}</p>
                <p className="spell-source">
                  {savedSpell.source || '–î–æ–º–æ—Ä–æ—â–µ–Ω–Ω–æ–µ'}
                </p>
                <button
                  className="delete-spell"
                  onClick={(e) => deleteSpell(savedSpell.id, e)}
                >
                  –£–¥–∞–ª–∏—Ç—å
                </button>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default CreateSpell;
