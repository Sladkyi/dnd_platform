export const createIncomingMessageHandler = ({
  myShapeId,
  role,
  animateShape,
  setShapes,
  setPlayerShape,
  fetchSessionPlayers,
  setPlayers,
  positionRef,
  sessionId,
  movementLocks,
  setTurnOrder,
  setCurrentTurnShapeId,
  setRooms,
  setCurrentRoom,
  setItems,
  setAllItems,
  currentRoomRef,
  currentRoom,
  setAllShapes,
}) => {
  return (data) => {
    // console.log(
    //   'üì® handleIncomingMessage –ø–æ–ª—É—á–∏–ª —Å—ã—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:',
    //   JSON.stringify(data, null, 2)
    // );

    if (!data || typeof data !== 'object') {
      console.warn('‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ –æ–±—ä–µ–∫—Ç):', data);
      return;
    }

    if (data.type === 'connection') {
      console.log('üîó WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:', data.status);
      return;
    }

    if (!data.action) {
      console.warn('‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –ø–æ–ª—è action. –ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç:', data);
      return;
    }
    if (data.error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞:', data.error);

      if (data.error === 'too_many_requests') {
        delete movementLocks.current[myShapeId]; // üëà —Å–Ω–∏–º–∞–µ—à—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏–º–µ–Ω–Ω–æ —Å–≤–æ–µ–π —Ñ–∏–≥—É—Ä—ã
        console.warn('üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω—è—Ç–∞ –∏–∑-–∑–∞ throttle –æ—à–∏–±–∫–∏');
      }

      return;
    }
    switch (data.action) {
      case 'move':
        if (data.payload) {
          const { id, x, y, duration = 400 } = data.payload;

          if (id === myShapeId) {
            console.log(
              'üîÑ –ü–æ–ª—É—á–µ–Ω–æ –¥–≤–∏–∂–µ–Ω–∏–µ —Å–≤–æ–µ–π —Ñ–∏–≥—É—Ä—ã - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é'
            );
            break;
          }

          // üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞: –µ—Å–ª–∏ —Ñ–∏–≥—É—Ä–∞ –ª–æ–∫–∞–ª—å–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
          if (movementLocks.current[id]) {
            console.log(
              '‚è≥ –õ–æ–∫–∞–ª—å–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–ª—è —Ñ–∏–≥—É—Ä—ã',
              id,
              '- –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ'
            );
            break;
          }

          console.log(`üö∂ –ü–µ—Ä–µ–º–µ—â–∞—é —Ñ–∏–≥—É—Ä—É ${id} –≤ (${x}, ${y})`);
          animateShape(id, x, y, duration);
        } else {
          console.warn('‚ö†Ô∏è –ü—É—Å—Ç–æ–π payload –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è move');
        }
        break;
      case 'item_create':
        if (data.payload) {
          const item = data.payload;
          const currentRoom = currentRoomRef?.current;

          console.log('üÜï –ü—Ä–µ–¥–º–µ—Ç —Å–æ–∑–¥–∞–Ω:', item);
          console.log('üß≠ –¢–µ–∫—É—â–∞—è –∫–æ–º–Ω–∞—Ç–∞:', currentRoom);

          // –û–±–Ω–æ–≤–∏–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫
          setAllItems((prev) => [...prev, item]);

          // –ü–æ–∫–∞–∂–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç–µ, –µ—Å–ª–∏ –æ–Ω –ø–æ–¥—Ö–æ–¥–∏—Ç
          const shouldShow =
            (!item.room && !currentRoom) ||
            (currentRoom && item.room === currentRoom.id);

          if (shouldShow) {
            setItems((prev) => [...prev, item]);
            console.log('‚úÖ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç (—Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç–æ–π)');
          } else {
            console.log('üö´ –ù–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç ‚Äî –æ–Ω –∏–∑ –¥—Ä—É–≥–æ–π –∫–æ–º–Ω–∞—Ç—ã');
          }
        } else {
          console.warn('‚ö†Ô∏è –ü—É—Å—Ç–æ–π payload –≤ item_create');
        }
        break;

      case 'item_delete':
        if (data.payload?.id) {
          console.log('üóëÔ∏è –ü—Ä–µ–¥–º–µ—Ç —É–¥–∞–ª—ë–Ω:', data.payload.id);
          setItems((prev) =>
            prev.filter((item) => item.id !== data.payload.id)
          );
        } else {
          console.warn('‚ö†Ô∏è –ü—É—Å—Ç–æ–π payload –≤ item_delete');
        }
        break;
      case 'create':
        if (data.payload) {
          const newShape = data.payload;

          console.log('üÜï –°–æ–∑–¥–∞—é –Ω–æ–≤—É—é —Ñ–∏–≥—É—Ä—É:', newShape);

          // ‚úÖ –ü–æ–¥—Å—Ç–∞–≤–∏–º –∫–æ–º–Ω–∞—Ç—É, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ (–∏–Ω–∞—á–µ –ø—Ä–∏ —Å–º–µ–Ω–µ –æ–Ω–∞ –∏—Å—á–µ–∑–Ω–µ—Ç)
          if (newShape.room === undefined || newShape.room === null) {
            newShape.room = currentRoomRef.current?.id ?? 0;
          }

          // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∫ —Ñ–∏–≥—É—Ä—ã –≤ –∫–æ–º–Ω–∞—Ç–µ, —Ç–∞–∫ –∏ –≤—Å–µ —Ñ–∏–≥—É—Ä—ã
          setShapes((prev) => {
            const cleaned = prev.filter(
              (s) =>
                s.id !== 0 &&
                s.id !== '' &&
                s.id !== null &&
                s.id !== newShape.id
            );
            return [...cleaned, newShape];
          });

          setAllShapes((prev) => {
            const exists = prev.some((s) => s.id === newShape.id);
            return exists ? prev : [...prev, newShape];
          });
        } else {
          console.warn('‚ö†Ô∏è –ü—É—Å—Ç–æ–π payload –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è create');
        }
        break;

      case 'delete':
        if (data.payload) {
          console.log('üóëÔ∏è –£–¥–∞–ª—è—é —Ñ–∏–≥—É—Ä—É —Å id:', data.payload.id);

          setShapes((prev) => prev.filter((s) => s.id !== data.payload.id));
        } else {
          console.warn('‚ö†Ô∏è –ü—É—Å—Ç–æ–π payload –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è delete');
        }
        break;

      case 'map_sync':
        if (Array.isArray(data.payload) && data.payload.length > 0) {
          console.log(
            'üåç –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã. –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ñ–∏–≥—É—Ä—ã:',
            data.payload
          );

          const newShapes = data.payload.map((s) => ({ ...s }));
          setShapes(newShapes);

          const myShape = newShapes.find((s) => s.id === myShapeId);
          if (myShape) {
            console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–ª –ø–æ–∑–∏—Ü–∏—é —Å–≤–æ–µ–π —Ñ–∏–≥—É—Ä—ã:', myShape);
            setPlayerShape(myShape);
            positionRef.current = { x: myShape.x, y: myShape.y };
          }
        } else {
          console.log('üåç –ü—É—Å—Ç–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è ‚Äî –æ–±–Ω—É–ª—è—é —Ñ–∏–≥—É—Ä—ã');
          setShapes([]);
        }
        break;

      case 'update':
        if (data.payload) {
          const updated = data.payload;

          console.log('üîß –û–±–Ω–æ–≤–ª—è—é —Ñ–∏–≥—É—Ä—É:', updated);

          setShapes((prev) =>
            prev.map((s) => (s.id === updated.id ? { ...s, ...updated } : s))
          );

          if (updated.id === myShapeId && role === 'player') {
            setPlayerShape((prev) => ({ ...prev, ...updated }));

            if (updated.x !== undefined || updated.y !== undefined) {
              positionRef.current = {
                x: updated.x ?? positionRef.current.x,
                y: updated.y ?? positionRef.current.y,
              };
            }
          }
        } else {
          console.warn('‚ö†Ô∏è –ü—É—Å—Ç–æ–π payload –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è update');
        }
        break;
      case 'turn_order_update':
        console.log(data.payload);
        if (data.payload?.new_shape_id) {
          console.log(
            '‚ûï –ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å:',
            data.payload.new_shape_id
          );
          // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ
          setTurnOrder((prevOrder) => [
            ...prevOrder,
            data.payload.new_shape_id,
          ]);
        } else {
          console.warn('‚ö†Ô∏è –ü—É—Å—Ç–æ–π payload –≤ turn_order_update');
        }
        break;
      case 'create_room':
        if (data.payload?.room) {
          console.log(
            'üõèÔ∏è –î–æ–±–∞–≤–ª—è—é –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É —á–µ—Ä–µ–∑ WebSocket:',
            data.payload.room
          );

          setRooms((prev) => {
            const exists = prev.some((r) => r.id === data.payload.room.id);
            if (exists) {
              console.warn(
                '‚ö†Ô∏è –ö–æ–º–Ω–∞—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–µ –¥–æ–±–∞–≤–ª—è—é:',
                data.payload.room.id
              );
              return prev;
            }
            return [...prev, data.payload.room];
          });
        } else {
          console.warn('‚ö†Ô∏è –ü—É—Å—Ç–æ–π payload –≤ create_room');
        }
        break;
      case 'switch_room':
        if (data.payload?.room_id) {
          console.log('üõèÔ∏è –ü–µ—Ä–µ–∫–ª—é—á–∞—é –∫–æ–º–Ω–∞—Ç—É —á–µ—Ä–µ–∑ WebSocket:', data.payload);

          setCurrentRoom({
            id: data.payload.room_id,
            background_image: data.payload.background_image || null,
          });
        } else {
          console.warn('‚ö†Ô∏è –ü—É—Å—Ç–æ–π payload –≤ switch_room');
        }
        break;
      case 'turn_update':
        console.log(data.payload);
        if (data.payload?.current_shape_id !== undefined) {
          console.log(
            'üéØ –°–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç —Ñ–∏–≥—É—Ä–∞ —Å id:',
            data.payload.current_shape_id
          );
          // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ö–æ–¥–∞
          setCurrentTurnShapeId(data.payload.current_shape_id);
        } else {
          console.warn('‚ö†Ô∏è –ü—É—Å—Ç–æ–π payload –≤ turn_update');
        }
        break;
      case 'session_update':
        if (role === 'master') {
          console.log('üéÆ –°–µ—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤...');

          fetchSessionPlayers(sessionId)
            .then((response) => {
              console.log('‚úÖ –ò–≥—Ä–æ–∫–∏ —Å–µ—Å—Å–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', response.data);
              setPlayers(response.data);
            })
            .catch((err) =>
              console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:', err)
            );
        } else {
          console.log(
            '‚ÑπÔ∏è –ü–æ–ª—É—á–µ–Ω–æ session_update, –Ω–æ —Ä–æ–ª—å –Ω–µ master ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º'
          );
        }
        break;

      default:
        console.warn('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', data.action);
    }
  };
};
