import axiosInstance from '../app/axiosInstance';

export const fetchMap = (id) => axiosInstance.get(`/maps/${id}/`);
export const fetchRoom = (id) => axiosInstance.get(`/maps/rooms/${id}/`);
export const updateRoomId = (mapId, roomId) =>
  axiosInstance.patch(`/maps/${mapId}/`, { last_opened_room_id: roomId });

export const updateShapePosition = (shapeId, shapeData) =>
  axiosInstance.patch(`/maps/changePosition/${shapeId}/`, {
    shapes: [shapeData],
  });

// export const createShape = (mapId, mapTitle, userId, shapeData) =>
//   axiosInstance.put(`/maps/change/${mapId}/`, {
//     title: mapTitle,
//     user: userId,
//     shapes: [shapeData],
//   });
export const fetchShapeById = (shapeId) => {
  return axiosInstance.get(`/shapes/${shapeId}/`);
};
export const fetchRooms = (mapId) =>
  axiosInstance.get(`/maps/GetRooms/${mapId}/`);

export const fetchMainRoom = (mapId) =>
  axiosInstance.get(`/maps/getMainRoom/${mapId}/`);

// --- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ API ---
export const createShape = (shapeData) => {
  return axiosInstance.post('/shapes/create/', shapeData);
};

export const deleteRoom = (roomId) =>
  axiosInstance.delete(`/maps/rooms/${roomId}/delete/`);

export const fetchShapes = (mapId) => {
  return axiosInstance.get(`/maps/${mapId}/shapes/`);
};

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É
export const createRoom = (mapId, formData) =>
  axiosInstance.post(`/maps/CreateNewRoom/${mapId}/`, formData);
// –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä–æ–≤–æ–π URL / —Å–µ—Å—Å–∏—é
export const createSessionURL = (mapId, payload) =>
  axiosInstance.post(`/maps/createURL/${mapId}/`, payload);

// –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ñ–∏–≥—É—Ä—ã
export const uploadShapeImage = (shapeId, formData) =>
  axiosInstance.post(`/maps/uploadImage/${shapeId}/`, formData);

// –î–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–∫—É –∏–Ω—Ç–µ—Ä–µ—Å–∞
export const addPointOfInterest = (mapId, poiData) =>
  axiosInstance.post(`/maps/PontOfInterest/${mapId}/`, poiData);

// –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ (–ø–µ—Ä—Å–æ–Ω–∞–∂–∞)
export const editEntity = (shapeId, data) =>
  axiosInstance.patch(`/maps/entityEditing/${shapeId}/`, data);

// –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ (–ø–µ—Ä—Å–æ–Ω–∞–∂–∞)
export const fetchEntity = (shapeId) =>
  axiosInstance.get(`/maps/entityEditing/${shapeId}/`);

// –£–¥–∞–ª–∏—Ç—å —Ñ–∏–≥—É—Ä—É
export const deleteShape = (shapeId) =>
  axiosInstance.delete(`/maps/changePosition/delete/${shapeId}/`);

// –ß–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã
export const updateShapeData = (shapeId, data) =>
  axiosInstance.patch(`/maps/shape/update/${shapeId}/`, data);

// –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Å—Å–∏–∏ —Å –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
export const joinSessionWithShape = (sessionId, data) =>
  axiosInstance.post(`/maps/joinSessionWithShape/${sessionId}/`, data);

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏ –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
export const joinGame = (sessionId) =>
  axiosInstance.get(`/maps/join/${sessionId}/`);

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –∏–≥—Ä–æ–∫–∞

export const GetPlayerSpells = (playerId) =>
  axiosInstance.get(`/spells/getByCreator/${playerId}/`);

export const createSpell = (spellData) =>
  axiosInstance.post('/spells/create/', spellData);

// –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ
export const updateSpell = (id, spellData) =>
  axiosInstance.put(`/spells/update/${id}/`, spellData);

export const deleteSpellFromServer = (id) => {
  return axiosInstance.delete(`/spells/${id}/delete/`);
};

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–ª–∞—Å—Å—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
export const GetPlayerClasses = (playerId) =>
  axiosInstance.get(`/classes/getByCreator/${playerId}/`);

export const createClass = (classData) =>
  axiosInstance.post('/classes/create/', classData);

export const updateClass = (id, classData) =>
  axiosInstance.put(`/classes/update/${id}/`, classData);

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–∞—Å—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
export const GetPlayerRaces = (playerId) =>
  axiosInstance.get(`/races/getByCreator/${playerId}/`);

export const createRace = (raceData) =>
  axiosInstance.post('/races/create/', raceData);

export const updateRace = (id, raceData) =>
  axiosInstance.put(`/races/update/${id}/`, raceData);

export const createMap = (id, formData) =>
  axiosInstance.post(`/maps/change/${id}/`, formData, {
    headers: {
      'Content-Type': 'multipart/form-data',
    },
  });

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
export const GetPlayerItems = (playerId) =>
  axiosInstance.get(`/items/getByCreator/${playerId}/`);

export const createItem = (itemData) =>
  axiosInstance.post('/items/create/', itemData);

export const updateItem = (id, itemData) =>
  axiosInstance.put(`/items/update/${id}/`, itemData);

export const deleteClass = (id) =>
  axiosInstance.delete(`/classes/${id}/delete/`);

export const deleteRace = (id) => axiosInstance.delete(`/races/${id}/delete/`);

export const deleteItem = (id) => axiosInstance.delete(`/items/${id}/delete/`);
export const updateItemPosition = (itemId, x, y) => {
  return axiosInstance.patch(`/items/update/${itemId}/`, { x, y });
};
export const GetPlayerAttacks = (ownerId) =>
  axiosInstance.get(`/attacks/getByOwner/${ownerId}/`);

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∞—Ç–∞–∫—É
export const createAttack = (attackData) =>
  axiosInstance.post('/attacks/create/', attackData);

// –û–±–Ω–æ–≤–∏—Ç—å –∞—Ç–∞–∫—É –ø–æ id
export const updateAttack = (id, attackData) =>
  axiosInstance.put(`/attacks/update/${id}/`, attackData);

// –£–¥–∞–ª–∏—Ç—å –∞—Ç–∞–∫—É –ø–æ id
export const deleteAttack = (id) =>
  axiosInstance.delete(`/attacks/${id}/delete/`);

export const fetchSessionPlayers = (sessionId) => {
  return axiosInstance.get(`/sessions/${sessionId}/players/`);
};

export const fetchItems = (mapId) => {
  return axiosInstance.get(`/items/by-map/${mapId}/`);
};

export const createItemInstance = (data) => {
  return axiosInstance.post('/item-instances/', data);
};

// –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
export const updateItemInstance = (id, data) => {
  return axiosInstance.patch(`/item-instances/${id}/`, data);
};

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –∫–∞—Ä—Ç—ã
export const getItemInstancesByMap = (mapId) => {
  return axiosInstance.get(`/item-instances/?map=${mapId}`);
};

// –£–¥–∞–ª–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–µ–¥–º–µ—Ç–∞
export const deleteItemInstance = (id) => {
  return axiosInstance.delete(`/item-instances/${id}/`);
};
export const fetchItemInstances = (mapId) => {
  return axiosInstance.get(`/item-instances/by-map/${mapId}/`);
};

export const fetchItemInstancesByRoom = (mapId, roomId) => {
  return axiosInstance.get(`/item-instances/by-map/${mapId}/room/${roomId}/`);
};
// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ—á–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã

// –°–æ–∑–¥–∞—Ç—å —Ç–æ—á–∫—É –∏–Ω—Ç–µ—Ä–µ—Å–∞
export const createPointOfInterest = (data) => {
  return axiosInstance.post('/poi/', data);
};

// –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ—á–∫—É –∏–Ω—Ç–µ—Ä–µ—Å–∞
export const updatePointOfInterest = (poiId, formData) =>
  axiosInstance.patch(`/poi/${poiId}/`, formData, {
    headers: { 'Content-Type': 'multipart/form-data' },
  });

// –£–¥–∞–ª–∏—Ç—å —Ç–æ—á–∫—É –∏–Ω—Ç–µ—Ä–µ—Å–∞
export const deletePointOfInterest = (id) => {
  return axiosInstance.delete(`/poi/${id}/`);
};

export const fetchPointsOfInterest = (mapId, roomId = null) => {
  let url = `/poi/?map=${mapId}`;
  if (roomId) {
    url += `&room=${roomId}`;
  }
  return axiosInstance.get(url);
};

export const getPlayerEntities = (id) => {
  return axiosInstance.get(`/profile/getEntities/${id}/`);
};

export const cloneShape = (shapeId, mapId, x, y, roomId = null) => {
  return axiosInstance.post('/shapes/clone/', {
    shape_id: shapeId,
    map_id: mapId,
    x,
    y,
    room: roomId,
  });
};

export const createShapeFromImage = (file, x, y, mapId, profileId, roomId) => {
  const formData = new FormData();
  formData.append('image', file);
  formData.append('x', x);
  formData.append('y', y);
  formData.append('map', mapId);
  formData.append('creator', profileId);
  formData.append('room', roomId); // üëà –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
  return axiosInstance.post('/shapes/create/', formData, {
    headers: {
      'Content-Type': 'multipart/form-data',
    },
  });
};
