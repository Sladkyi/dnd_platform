# Generated by Django 5.1.5 on 2025-06-26 15:42

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='InventoryItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(default=1)),
                ('equipped', models.BooleanField(default=False)),
                ('is_quick_slot', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='CharacterClass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_public', models.BooleanField(default=False, verbose_name='Публичный')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('hit_dice', models.CharField(default='1d8', max_length=10, verbose_name='Кость хитов')),
                ('primary_abilities', models.JSONField(default=list, verbose_name="Ключевые характеристики (например, ['WIS'])")),
                ('saving_throws', models.JSONField(default=list, verbose_name="Спасброски (например, ['STR', 'CON'])")),
                ('proficiencies', models.TextField(blank=True, null=True, verbose_name='Владения (оружие, доспехи, инструменты)')),
                ('starting_equipment', models.JSONField(default=list, verbose_name="Стартовое снаряжение (например, ['Меч', 'Щит'])")),
                ('starting_features', models.JSONField(default=list, verbose_name='Умения 1 уровня')),
                ('class_features_by_level', models.JSONField(default=dict, verbose_name="Особенности по уровням (например, {'2': ['Охотничий натиск']})")),
                ('has_magic', models.BooleanField(default=False, verbose_name='Использует магию')),
                ('spellcasting_ability', models.CharField(blank=True, max_length=10, null=True, verbose_name='Характеристика заклинаний')),
                ('role', models.CharField(choices=[('tank', 'Танк'), ('healer', 'Лекарь'), ('dps', 'Урон'), ('support', 'Поддержка')], default='dps', max_length=50, verbose_name='Боевая роль')),
                ('complexity', models.CharField(choices=[('easy', 'Простой'), ('medium', 'Средний'), ('hard', 'Сложный')], default='medium', max_length=10, verbose_name='Сложность освоения')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Создатель')),
            ],
            options={
                'verbose_name': 'Класс персонажа',
                'verbose_name_plural': 'Классы персонажей',
            },
        ),
        migrations.CreateModel(
            name='Attack',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_public', models.BooleanField(default=False, verbose_name='Публичный')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('atk_type', models.CharField(choices=[('melee', 'Ближняя'), ('ranged', 'Дальняя'), ('special', 'Особая')], default='melee', max_length=20, verbose_name='Тип атаки')),
                ('attack_bonus', models.IntegerField(default=0, verbose_name='Бонус атаки')),
                ('damage', models.CharField(max_length=50, verbose_name='Урон')),
                ('damage_type', models.CharField(blank=True, max_length=50, null=True, verbose_name='Тип урона')),
                ('is_ranged', models.BooleanField(default=False, verbose_name='Дальнобойная')),
                ('usage_count', models.PositiveIntegerField(default=0, verbose_name='Количество использований')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Создатель')),
                ('owners', models.ManyToManyField(blank=True, related_name='owned_attacks', to=settings.AUTH_USER_MODEL, verbose_name='Пользователи, использующие эту атаку')),
                ('source_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='attacks', to='maps.inventoryitem', verbose_name='Источник (предмет)')),
            ],
            options={
                'verbose_name': 'Атака',
                'verbose_name_plural': 'Атаки',
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_public', models.BooleanField(default=False, verbose_name='Публичный')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('rarity', models.CharField(choices=[('common', 'Обычный'), ('uncommon', 'Необычный'), ('rare', 'Редкий'), ('epic', 'Эпический'), ('legendary', 'Легендарный'), ('artifact', 'Артефакт')], default='common', max_length=20, verbose_name='Редкость')),
                ('damage', models.CharField(blank=True, max_length=50, null=True, verbose_name='Урон')),
                ('armor_bonus', models.IntegerField(default=0, verbose_name='Бонус к броне')),
                ('effect', models.TextField(blank=True, null=True, verbose_name='Эффект')),
                ('is_magical', models.BooleanField(default=False, verbose_name='Магический')),
                ('is_consumable', models.BooleanField(default=False, verbose_name='Расходуемый')),
                ('charges', models.IntegerField(default=0, verbose_name='Заряды')),
                ('max_charges', models.IntegerField(default=0, verbose_name='Максимум зарядов')),
                ('slot_type', models.CharField(blank=True, choices=[('head', 'Голова'), ('body', 'Тело'), ('weapon', 'Оружие'), ('accessory', 'Аксессуар')], max_length=50, null=True, verbose_name='Слот экипировки')),
                ('requirements', models.TextField(blank=True, null=True, verbose_name='Требования')),
                ('usable_by', models.JSONField(blank=True, default=list, verbose_name='Кем используется')),
                ('flavor_text', models.CharField(blank=True, max_length=200, null=True, verbose_name='Флэйвор-текст')),
                ('lore', models.TextField(blank=True, null=True, verbose_name='Лор')),
                ('is_unique', models.BooleanField(default=False, verbose_name='Уникальный')),
                ('weight', models.FloatField(default=0.0, verbose_name='Вес')),
                ('value', models.IntegerField(default=0, verbose_name='Ценность (золото)')),
                ('is_quest_item', models.BooleanField(default=False, verbose_name='Квестовый предмет')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Создатель')),
            ],
            options={
                'verbose_name': 'Предмет',
                'verbose_name_plural': 'Предметы',
            },
        ),
        migrations.AddField(
            model_name='inventoryitem',
            name='item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='maps.item'),
        ),
        migrations.CreateModel(
            name='Map',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Название')),
                ('full_card_map_image', models.ImageField(blank=True, null=True, upload_to='maps/')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('image', models.ImageField(blank=True, null=True, upload_to='maps/')),
                ('last_opened_room_id', models.PositiveIntegerField(blank=True, null=True, verbose_name='ID последней открытой комнаты')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Карта',
                'verbose_name_plural': 'Карты',
            },
        ),
        migrations.CreateModel(
            name='GameSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('password', models.CharField(blank=True, max_length=100, null=True)),
                ('max_players', models.IntegerField(default=5)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('code', models.CharField(blank=True, max_length=100, null=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('map', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='open_rooms', to='maps.map', verbose_name='Карта')),
            ],
        ),
        migrations.CreateModel(
            name='Race',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_public', models.BooleanField(default=False, verbose_name='Публичный')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('traits', models.JSONField(blank=True, default=list, null=True, verbose_name='Черты расы')),
                ('ability_bonuses', models.JSONField(default=dict, verbose_name="Бонусы к характеристикам (например, {'STR': 2, 'CHA': 1})")),
                ('languages', models.JSONField(default=list, verbose_name="Языки (например, ['Общий', 'Эльфийский'])")),
                ('speed', models.IntegerField(default=30, verbose_name='Скорость перемещения')),
                ('size', models.CharField(choices=[('tiny', 'Крошечный'), ('small', 'Маленький'), ('medium', 'Средний'), ('large', 'Большой'), ('huge', 'Огромный')], default='medium', max_length=20, verbose_name='Размер')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Создатель')),
            ],
            options={
                'verbose_name': 'Раса',
                'verbose_name_plural': 'Расы',
            },
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название комнаты')),
                ('background_image', models.ImageField(blank=True, null=True, upload_to='rooms/backgrounds/', verbose_name='Фоновое изображение')),
                ('description', models.TextField(blank=True, verbose_name='Описание комнаты')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Порядок отображения')),
                ('map', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rooms', to='maps.map', verbose_name='Карта')),
            ],
            options={
                'verbose_name': 'Комната',
                'verbose_name_plural': 'Комнаты',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='MapPoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('x', models.FloatField(verbose_name='Координата X')),
                ('y', models.FloatField(verbose_name='Координата Y')),
                ('title', models.CharField(max_length=100, verbose_name='Название точки')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('icon_type', models.CharField(blank=True, max_length=50, null=True, verbose_name="Тип иконки (например, 'NPC', 'враг', 'переход')")),
                ('is_visible', models.BooleanField(default=True, verbose_name='Видимость на карте')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('map', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='points', to='maps.map', verbose_name='Карта')),
                ('room', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='maps.room', verbose_name='Комната (если связана)')),
            ],
            options={
                'verbose_name': 'Точка на карте',
                'verbose_name_plural': 'Точки на карте',
            },
        ),
        migrations.CreateModel(
            name='RoomPlayer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='maps.room')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Shape',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Имя персонажа')),
                ('level', models.IntegerField(default=1, verbose_name='Уровень')),
                ('max_hp', models.IntegerField(default=10, verbose_name='Максимальные HP')),
                ('current_hp', models.IntegerField(default=10, verbose_name='Текущие HP')),
                ('temp_hp', models.IntegerField(default=0, verbose_name='Временные HP')),
                ('speed', models.IntegerField(default=30, verbose_name='Скорость')),
                ('armor_class', models.IntegerField(default=10, verbose_name='Класс брони')),
                ('attack_bonus', models.IntegerField(default=0, verbose_name='Бонус атаки')),
                ('damage', models.CharField(blank=True, max_length=20, null=True, verbose_name='Урон')),
                ('type', models.CharField(choices=[('star', 'Star'), ('circle', 'Circle'), ('rectangle', 'Rectangle')], max_length=50)),
                ('x', models.FloatField()),
                ('y', models.FloatField()),
                ('rotation', models.FloatField(default=0)),
                ('fill', models.CharField(default='#FFFFFF', max_length=20)),
                ('stroke', models.CharField(blank=True, max_length=20, null=True)),
                ('stroke_width', models.FloatField(default=1.0)),
                ('num_points', models.IntegerField(blank=True, null=True)),
                ('inner_radius', models.FloatField(blank=True, null=True)),
                ('outer_radius', models.FloatField(blank=True, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='shapes/')),
                ('wiewField', models.IntegerField(blank=True, default=60, null=True)),
                ('is_clone', models.BooleanField(default=False)),
                ('isPlayer', models.BooleanField(default=False)),
                ('is_npc', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('strength', models.IntegerField(default=10)),
                ('dexterity', models.IntegerField(default=10)),
                ('constitution', models.IntegerField(default=10)),
                ('intelligence', models.IntegerField(default=10)),
                ('wisdom', models.IntegerField(default=10)),
                ('charisma', models.IntegerField(default=10)),
                ('str_save', models.IntegerField(default=0)),
                ('dex_save', models.IntegerField(default=0)),
                ('con_save', models.IntegerField(default=0)),
                ('int_save', models.IntegerField(default=0)),
                ('wis_save', models.IntegerField(default=0)),
                ('cha_save', models.IntegerField(default=0)),
                ('strength_save_proficient', models.BooleanField(default=False)),
                ('dexterity_save_proficient', models.BooleanField(default=False)),
                ('constitution_save_proficient', models.BooleanField(default=False)),
                ('intelligence_save_proficient', models.BooleanField(default=False)),
                ('wisdom_save_proficient', models.BooleanField(default=False)),
                ('charisma_save_proficient', models.BooleanField(default=False)),
                ('athletics_proficient', models.BooleanField(default=False)),
                ('acrobatics_proficient', models.BooleanField(default=False)),
                ('sleight_of_hand_proficient', models.BooleanField(default=False)),
                ('stealth_proficient', models.BooleanField(default=False)),
                ('investigation_proficient', models.BooleanField(default=False)),
                ('history_proficient', models.BooleanField(default=False)),
                ('arcana_proficient', models.BooleanField(default=False)),
                ('nature_proficient', models.BooleanField(default=False)),
                ('religion_proficient', models.BooleanField(default=False)),
                ('perception_proficient', models.BooleanField(default=False)),
                ('survival_proficient', models.BooleanField(default=False)),
                ('medicine_proficient', models.BooleanField(default=False)),
                ('insight_proficient', models.BooleanField(default=False)),
                ('animal_handling_proficient', models.BooleanField(default=False)),
                ('performance_proficient', models.BooleanField(default=False)),
                ('intimidation_proficient', models.BooleanField(default=False)),
                ('deception_proficient', models.BooleanField(default=False)),
                ('persuasion_proficient', models.BooleanField(default=False)),
                ('background', models.TextField(blank=True, null=True)),
                ('personality_traits', models.TextField(blank=True, null=True)),
                ('ideals', models.TextField(blank=True, null=True)),
                ('bonds', models.TextField(blank=True, null=True)),
                ('flaws', models.TextField(blank=True, null=True)),
                ('appearance', models.TextField(blank=True, null=True)),
                ('allies', models.TextField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('achievements', models.TextField(blank=True, null=True)),
                ('past_experiences', models.TextField(blank=True, null=True)),
                ('alignment', models.CharField(blank=True, max_length=50, null=True)),
                ('fears', models.TextField(blank=True, null=True)),
                ('motivations', models.TextField(blank=True, null=True)),
                ('reputation', models.TextField(blank=True, null=True)),
                ('notable_features', models.TextField(blank=True, null=True)),
                ('conditions', models.TextField(blank=True, null=True)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('height', models.CharField(blank=True, max_length=20, null=True)),
                ('weight', models.CharField(blank=True, max_length=20, null=True)),
                ('gender', models.CharField(blank=True, max_length=50, null=True)),
                ('pronouns', models.CharField(blank=True, max_length=50, null=True)),
                ('fighting_style', models.CharField(blank=True, max_length=100, null=True)),
                ('known_spells_text', models.TextField(blank=True, null=True)),
                ('equipment_text', models.TextField(blank=True, null=True)),
                ('resistances', models.TextField(blank=True, null=True)),
                ('vulnerabilities', models.TextField(blank=True, null=True)),
                ('rumors', models.TextField(blank=True, null=True)),
                ('quotes', models.TextField(blank=True, null=True)),
                ('memories', models.TextField(blank=True, null=True)),
                ('legacy', models.TextField(blank=True, null=True)),
                ('home_town', models.CharField(blank=True, max_length=100, null=True)),
                ('patrons', models.TextField(blank=True, null=True)),
                ('rivalries', models.TextField(blank=True, null=True)),
                ('quests', models.TextField(blank=True, null=True)),
                ('sanity', models.IntegerField(default=100)),
                ('insanity', models.TextField(blank=True, null=True)),
                ('mood', models.CharField(blank=True, max_length=50, null=True)),
                ('initiative', models.IntegerField(default=0)),
                ('proficiency_bonus', models.IntegerField(default=2)),
                ('hit_dice', models.CharField(blank=True, max_length=20, null=True)),
                ('death_saves_success', models.IntegerField(default=0)),
                ('death_saves_fail', models.IntegerField(default=0)),
                ('spell_slots_total', models.IntegerField(default=0)),
                ('spell_slots_used', models.IntegerField(default=0)),
                ('known_cantrips', models.TextField(blank=True, null=True)),
                ('prepared_spells', models.TextField(blank=True, null=True)),
                ('saving_throws', models.JSONField(default=dict)),
                ('skills', models.JSONField(default=dict)),
                ('max_ap', models.IntegerField(default=3)),
                ('current_ap', models.IntegerField(default=3)),
                ('statuses', models.JSONField(default=list)),
                ('is_invisible', models.BooleanField(default=False)),
                ('is_stunned', models.BooleanField(default=False)),
                ('is_paralyzed', models.BooleanField(default=False)),
                ('reaction_used', models.BooleanField(default=False)),
                ('extra_attacks', models.IntegerField(default=0)),
                ('created_from_test', models.BooleanField(default=False)),
                ('emotion_override', models.CharField(blank=True, max_length=50, null=True)),
                ('favorite_gifs', models.JSONField(default=list)),
                ('tags', models.JSONField(blank=True, default=list)),
                ('experience', models.IntegerField(default=0)),
                ('is_dead', models.BooleanField(default=False)),
                ('is_permanently_dead', models.BooleanField(default=False, verbose_name='Персонаж окончательно мёртв')),
                ('permadeath', models.BooleanField(default=False, verbose_name='Перманентная смерть')),
                ('is_public', models.BooleanField(default=False, verbose_name='Публичный персонаж')),
                ('main_action', models.CharField(blank=True, max_length=100, null=True)),
                ('bonus_action', models.CharField(blank=True, max_length=100, null=True)),
                ('movement_used', models.IntegerField(default=0)),
                ('free_interaction_used', models.BooleanField(default=False)),
                ('attacks', models.ManyToManyField(blank=True, related_name='shapes', to='maps.attack', verbose_name='Атаки персонажа')),
                ('body_slot', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='equipped_on_body', to='maps.item')),
                ('character_class', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='maps.characterclass', verbose_name='Класс')),
                ('current_map', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='current_map', to='maps.map')),
                ('head_slot', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='equipped_on_head', to='maps.item')),
                ('inventory', models.ManyToManyField(related_name='owners', through='maps.InventoryItem', to='maps.item')),
                ('map', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='shapes', to='maps.map')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='controlled_shapes', to=settings.AUTH_USER_MODEL, verbose_name='Игрок, управляющий сущностью')),
                ('race', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='maps.race', verbose_name='Раса')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
                ('weapon_slot', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='equipped_as_weapon', to='maps.item')),
            ],
            options={
                'verbose_name': 'Сущность / Персонаж',
                'verbose_name_plural': 'Сущности / Персонажи',
            },
        ),
        migrations.AddField(
            model_name='inventoryitem',
            name='shape',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory_items', to='maps.shape'),
        ),
        migrations.CreateModel(
            name='Spell',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_public', models.BooleanField(default=False, verbose_name='Публичный')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('level', models.IntegerField(default=0, verbose_name='Уровень заклинания')),
                ('school', models.CharField(blank=True, max_length=100, null=True, verbose_name='Школа магии')),
                ('casting_time', models.CharField(default='1 действие', max_length=100, verbose_name='Время накладывания')),
                ('range', models.CharField(default='На себя', max_length=100, verbose_name='Дистанция')),
                ('duration', models.CharField(default='Мгновенно', max_length=100, verbose_name='Длительность')),
                ('components', models.CharField(default='В', max_length=100, verbose_name='Компоненты')),
                ('materials', models.TextField(blank=True, null=True, verbose_name='Материалы (если есть)')),
                ('damage', models.CharField(blank=True, max_length=50, null=True, verbose_name='Урон (например, 3d6)')),
                ('damage_type', models.CharField(blank=True, max_length=50, null=True, verbose_name='Тип урона')),
                ('save_type', models.CharField(blank=True, max_length=50, null=True, verbose_name='Тип спасброска')),
                ('effect', models.TextField(blank=True, null=True, verbose_name='Эффект/Механика')),
                ('is_concentration', models.BooleanField(default=False, verbose_name='Концентрация')),
                ('is_ritual', models.BooleanField(default=False, verbose_name='Ритуал')),
                ('gif', models.FileField(blank=True, null=True, upload_to='spells/gifs/', verbose_name='Гифка к заклинанию')),
                ('source', models.CharField(blank=True, max_length=100, null=True, verbose_name='Источник')),
                ('area_of_effect', models.CharField(blank=True, max_length=50, null=True, verbose_name='Форма зоны')),
                ('area_size', models.CharField(blank=True, max_length=50, null=True, verbose_name='Размер зоны')),
                ('classes_json', models.TextField(blank=True, null=True, verbose_name='Классы (JSON)')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Создатель')),
            ],
            options={
                'verbose_name': 'Заклинание',
                'verbose_name_plural': 'Заклинания',
            },
        ),
        migrations.AddField(
            model_name='shape',
            name='spells',
            field=models.ManyToManyField(blank=True, related_name='characters', to='maps.spell', verbose_name='Изученные заклинания'),
        ),
        migrations.AddField(
            model_name='characterclass',
            name='spell_list',
            field=models.ManyToManyField(blank=True, to='maps.spell', verbose_name='Доступные заклинания'),
        ),
        migrations.AddField(
            model_name='attack',
            name='source_spell',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='attacks', to='maps.spell', verbose_name='Источник (заклинание)'),
        ),
        migrations.CreateModel(
            name='PlayerInSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='players', to='maps.gamesession')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='maps.shape', verbose_name='Персонаж')),
            ],
            options={
                'verbose_name': 'Игрок в сессии',
                'verbose_name_plural': 'Игроки в сессиях',
                'unique_together': {('session', 'user')},
            },
        ),
    ]
