from django.db import models
from django.contrib.auth.models import User
import uuid
from django.contrib.postgres.fields import JSONField  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ JSONField –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∏–≥—É—Ä–∞—Ö


class Map(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    title = models.CharField(max_length=100, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ")
    full_card_map_image = models.ImageField(upload_to='maps/', null=True, blank=True)
    description = models.TextField(blank=True, verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
    image = models.ImageField(upload_to='maps/', null=True, blank=True)
    last_opened_room_id = models.PositiveIntegerField(null=True, blank=True,
                                                      verbose_name="ID –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–∫—Ä—ã—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã")
    turn_order = models.JSONField(default=list)
    current_turn_index = models.IntegerField(default=0)
    def __str__(self):
        return self.title

    class Meta:
        verbose_name = "–ö–∞—Ä—Ç–∞"
        verbose_name_plural = "–ö–∞—Ä—Ç—ã"
class GameSession(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    name = models.CharField(max_length=255)
    owner = models.ForeignKey(User, on_delete=models.CASCADE)
    password = models.CharField(max_length=100, blank=True, null=True)
    max_players = models.IntegerField(default=5)
    created_at = models.DateTimeField(auto_now_add=True)
    map = models.ForeignKey(Map, on_delete=models.CASCADE, related_name="open_rooms", verbose_name="–ö–∞—Ä—Ç–∞")
    code = models.CharField(max_length=100, blank=True, null=True)



class Room(models.Model):
    map = models.ForeignKey(Map, on_delete=models.CASCADE, related_name="rooms", verbose_name="–ö–∞—Ä—Ç–∞")
    name = models.CharField(max_length=100, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã")
    background_image = models.ImageField(upload_to='rooms/backgrounds/', null=True, blank=True, verbose_name="–§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    description = models.TextField(blank=True, verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã")
    order = models.PositiveIntegerField(default=0, verbose_name="–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")  # –µ—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ —É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏–µ

    def __str__(self):
        return f"{self.name} (–¥–ª—è –∫–∞—Ä—Ç—ã: {self.map.title})"

    class Meta:
        verbose_name = "–ö–æ–º–Ω–∞—Ç–∞"
        verbose_name_plural = "–ö–æ–º–Ω–∞—Ç—ã"
        ordering = ['order']  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –ø–æ—Ä—è–¥–∫—É

class MapPoint(models.Model):
    POI_TYPE_CHOICES = [
        ('story', '–°—é–∂–µ—Ç'),
        ('trap', '–õ–æ–≤—É—à–∫–∞'),
        ('chest', '–°—É–Ω–¥—É–∫'),
        ('portal', '–ü–æ—Ä—Ç–∞–ª'),
        ('combat', '–ë–æ–π'),
        ('note', '–ó–∞–º–µ—Ç–∫–∞'),
        ('hidden', '–°–∫—Ä—ã—Ç–æ–µ'),
        ('trigger', '–¢—Ä–∏–≥–≥–µ—Ä'),
        ('npc', 'NPC'),
        ('sound', '–ó–≤—É–∫'),
        ('slideshow' , '–°–ª–∞–π–¥—à–æ—É')
    ]
    
    map = models.ForeignKey(Map, on_delete=models.CASCADE, related_name="points", verbose_name="–ö–∞—Ä—Ç–∞")
    room = models.ForeignKey(Room, on_delete=models.SET_NULL, null=True, blank=True, verbose_name="–ö–æ–º–Ω–∞—Ç–∞ (–µ—Å–ª–∏ —Å–≤—è–∑–∞–Ω–∞)")
    x = models.FloatField(verbose_name="–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X")
    y = models.FloatField(verbose_name="–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y")
    title = models.CharField(max_length=100, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—á–∫–∏")
    description = models.TextField(blank=True, verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ")
    icon_type = models.CharField(
    max_length=20,
    choices=POI_TYPE_CHOICES,
    default='story'
    
)
    is_visible = models.BooleanField(default=True, verbose_name="–í–∏–¥–∏–º–æ—Å—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ")
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    target_room = models.ForeignKey(Room, on_delete=models.SET_NULL, null=True, blank=True, related_name='target_points', verbose_name="–¶–µ–ª–µ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞ (–¥–ª—è –ø–æ—Ä—Ç–∞–ª–æ–≤)")
    image = models.ImageField(upload_to='poi_images/', null=True, blank=True, verbose_name="–ö–∞—Ä—Ç–∏–Ω–∫–∞ —Ç–æ—á–∫–∏")

    def __str__(self):
        return f"{self.title} ({self.map.title})"

    class Meta:
        verbose_name = "–¢–æ—á–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–µ"
        verbose_name_plural = "–¢–æ—á–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ"

class MapPointImage(models.Model):
    point = models.ForeignKey('MapPoint', on_delete=models.CASCADE, related_name='images', verbose_name='–¢–æ—á–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–∞')
    image = models.ImageField(upload_to='poi_images/', verbose_name='–ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å–ª–∞–π–¥-—à–æ—É')
    order = models.PositiveIntegerField(default=0, verbose_name='–ü–æ—Ä—è–¥–æ–∫ –ø–æ–∫–∞–∑–∞')

    def __str__(self):
        return f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è {self.point.title}"


class BaseAsset(models.Model):
    creator = models.ForeignKey(
        User,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="–°–æ–∑–¥–∞—Ç–µ–ª—å"
    )
    image = models.ImageField(upload_to='item_images/', blank=True, null=True, verbose_name="–ö–∞—Ä—Ç–∏–Ω–∫–∞")
    is_public = models.BooleanField(default=False, verbose_name="–ü—É–±–ª–∏—á–Ω—ã–π")
    name = models.CharField(max_length=100, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ")
    description = models.TextField(blank=True, verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ")
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        abstract = True  # –Ω–µ —Å–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É, —Ç–æ–ª—å–∫–æ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ

    def __str__(self):
        return self.name


class Race(BaseAsset):
    # üß¨ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
    traits = models.JSONField(default=list, null=True, blank=True, verbose_name="–ß–µ—Ä—Ç—ã —Ä–∞—Å—ã")
    ability_bonuses = models.JSONField(default=dict, verbose_name="–ë–æ–Ω—É—Å—ã –∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, {'STR': 2, 'CHA': 1})")
    languages = models.JSONField(default=list, verbose_name="–Ø–∑—ã–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ['–û–±—â–∏–π', '–≠–ª—å—Ñ–∏–π—Å–∫–∏–π'])")

    # üìè –§–∏–∑–∏–∫–∞
    speed = models.IntegerField(default=30, verbose_name="–°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è")
    size = models.CharField(
        max_length=20,
        choices=[
            ('tiny', '–ö—Ä–æ—à–µ—á–Ω—ã–π'),
            ('small', '–ú–∞–ª–µ–Ω—å–∫–∏–π'),
            ('medium', '–°—Ä–µ–¥–Ω–∏–π'),
            ('large', '–ë–æ–ª—å—à–æ–π'),
            ('huge', '–û–≥—Ä–æ–º–Ω—ã–π'),
        ],
        default='medium',
        verbose_name="–†–∞–∑–º–µ—Ä"
    )

    class Meta:
        verbose_name = "–†–∞—Å–∞"
        verbose_name_plural = "–†–∞—Å—ã"


class CharacterClass(BaseAsset):
    # üìä –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    hit_dice = models.CharField(max_length=10, default="1d8", verbose_name="–ö–æ—Å—Ç—å —Ö–∏—Ç–æ–≤")
    primary_abilities = models.JSONField(default=list, verbose_name="–ö–ª—é—á–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ['WIS'])")
    saving_throws = models.JSONField(default=list, verbose_name="–°–ø–∞—Å–±—Ä–æ—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ['STR', 'CON'])")

    # üõ† –ù–∞–≤—ã–∫–∏ –∏ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ
    proficiencies = models.TextField(blank=True, null=True, verbose_name="–í–ª–∞–¥–µ–Ω–∏—è (–æ—Ä—É–∂–∏–µ, –¥–æ—Å–ø–µ—Ö–∏, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã)")
    starting_equipment = models.JSONField(default=list, verbose_name="–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ['–ú–µ—á', '–©–∏—Ç'])")

    # ‚ú® –£–º–µ–Ω–∏—è
    starting_features = models.JSONField(default=list, verbose_name="–£–º–µ–Ω–∏—è 1 —É—Ä–æ–≤–Ω—è")
    class_features_by_level = models.JSONField(default=dict, verbose_name="–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, {'2': ['–û—Ö–æ—Ç–Ω–∏—á–∏–π –Ω–∞—Ç–∏—Å–∫']})")

    # üîÆ –ú–∞–≥–∏—è
    has_magic = models.BooleanField(default=False, verbose_name="–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∞–≥–∏—é")
    spellcasting_ability = models.CharField(max_length=40, blank=True, null=True, verbose_name="–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π")
    spell_list = models.ManyToManyField('Spell', blank=True, verbose_name="–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è")



    # üìä UI-–º–µ—Ç–∞
    role = models.CharField(
        max_length=50,
        choices=[('tank', '–¢–∞–Ω–∫'), ('healer', '–õ–µ–∫–∞—Ä—å'), ('dps', '–£—Ä–æ–Ω'), ('support', '–ü–æ–¥–¥–µ—Ä–∂–∫–∞')],
        default='dps',
        verbose_name="–ë–æ–µ–≤–∞—è —Ä–æ–ª—å",
        blank=True
    )
    complexity = models.CharField(
        max_length=10,
        choices=[
            ('easy', '–ü—Ä–æ—Å—Ç–æ–π'),
            ('medium', '–°—Ä–µ–¥–Ω–∏–π'),
            ('hard', '–°–ª–æ–∂–Ω—ã–π'),
        ],
        default='medium',
        verbose_name="–°–ª–æ–∂–Ω–æ—Å—Ç—å –æ—Å–≤–æ–µ–Ω–∏—è"
    )

    class Meta:
        verbose_name = "–ö–ª–∞—Å—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"
        verbose_name_plural = "–ö–ª–∞—Å—Å—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"


class Attack(BaseAsset):
    ATTACK_TYPES = [
        ('melee', '–ë–ª–∏–∂–Ω—è—è'),
        ('ranged', '–î–∞–ª—å–Ω—è—è'),
        ('special', '–û—Å–æ–±–∞—è'),
    ]

    atk_type = models.CharField(max_length=20, choices=ATTACK_TYPES, default='melee', verbose_name="–¢–∏–ø –∞—Ç–∞–∫–∏")
    attack_bonus = models.IntegerField(default=0, verbose_name="–ë–æ–Ω—É—Å –∞—Ç–∞–∫–∏")
    damage = models.CharField(max_length=50, verbose_name="–£—Ä–æ–Ω")
    damage_type = models.CharField(max_length=50, blank=True, null=True, verbose_name="–¢–∏–ø —É—Ä–æ–Ω–∞")
    is_ranged = models.BooleanField(default=False, verbose_name="–î–∞–ª—å–Ω–æ–±–æ–π–Ω–∞—è")

    # –°–≤—è–∑—å —Å –ø—Ä–µ–¥–º–µ—Ç–æ–º/–∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å
    source_item = models.ForeignKey(
        'InventoryItem',
        null=True,
        blank=True,
        on_delete=models.SET_NULL,
        related_name="attacks",
        verbose_name="–ò—Å—Ç–æ—á–Ω–∏–∫ (–ø—Ä–µ–¥–º–µ—Ç)"
    )
    source_spell = models.ForeignKey(
        'Spell',
        null=True,
        blank=True,
        on_delete=models.SET_NULL,
        related_name="attacks",
        verbose_name="–ò—Å—Ç–æ—á–Ω–∏–∫ (–∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ)"
    )

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç / –≤–ª–∞–¥–µ—é—Ç —ç—Ç–æ–π –∞—Ç–∞–∫–æ–π
    owners = models.ManyToManyField(
        User,
        blank=True,
        related_name="owned_attacks",
        verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ —ç—Ç—É –∞—Ç–∞–∫—É"
    )

    usage_count = models.PositiveIntegerField(default=0, verbose_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π")

    updated_at = models.DateTimeField(auto_now=True, verbose_name="–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

    class Meta:
        verbose_name = "–ê—Ç–∞–∫–∞"
        verbose_name_plural = "–ê—Ç–∞–∫–∏"


class Spell(BaseAsset):
    level = models.IntegerField(default=0, verbose_name="–£—Ä–æ–≤–µ–Ω—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è")
    school = models.CharField(max_length=100, blank=True, null=True, verbose_name="–®–∫–æ–ª–∞ –º–∞–≥–∏–∏")
    casting_time = models.CharField(max_length=100, default="1 –¥–µ–π—Å—Ç–≤–∏–µ", verbose_name="–í—Ä–µ–º—è –Ω–∞–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è")
    range = models.CharField(max_length=100, default="–ù–∞ —Å–µ–±—è", verbose_name="–î–∏—Å—Ç–∞–Ω—Ü–∏—è")
    duration = models.CharField(max_length=100, default="–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ", verbose_name="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
    components = models.CharField(max_length=100, default="–í", verbose_name="–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
    materials = models.TextField(blank=True, null=True, verbose_name="–ú–∞—Ç–µ—Ä–∏–∞–ª—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)")
    damage = models.CharField(max_length=50, blank=True, null=True, verbose_name="–£—Ä–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3d6)")
    damage_type = models.CharField(max_length=50, blank=True, null=True, verbose_name="–¢–∏–ø —É—Ä–æ–Ω–∞")
    save_type = models.CharField(max_length=50, blank=True, null=True, verbose_name="–¢–∏–ø —Å–ø–∞—Å–±—Ä–æ—Å–∫–∞")
    effect = models.TextField(blank=True, null=True, verbose_name="–≠—Ñ—Ñ–µ–∫—Ç/–ú–µ—Ö–∞–Ω–∏–∫–∞")
    is_concentration = models.BooleanField(default=False, verbose_name="–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è")
    is_ritual = models.BooleanField(default=False, verbose_name="–†–∏—Ç—É–∞–ª")
    gif = models.FileField(upload_to='spells/gifs/', blank=True, null=True, verbose_name="–ì–∏—Ñ–∫–∞ –∫ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—é")
    source = models.CharField(max_length=100, blank=True, null=True, verbose_name="–ò—Å—Ç–æ—á–Ω–∏–∫")
    area_of_effect = models.CharField(max_length=50, blank=True, null=True, verbose_name="–§–æ—Ä–º–∞ –∑–æ–Ω—ã")
    area_size = models.CharField(max_length=50, blank=True, null=True, verbose_name="–†–∞–∑–º–µ—Ä –∑–æ–Ω—ã")
    classes_json = models.TextField(blank=True, null=True, verbose_name="–ö–ª–∞—Å—Å—ã (JSON)")  # üëà –°–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤

    class Meta:
        verbose_name = "–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ"
        verbose_name_plural = "–ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è"


class Item(BaseAsset):
    # ‚ú® –†–µ–¥–∫–æ—Å—Ç—å
    RARITY_CHOICES = [
        ('common', '–û–±—ã—á–Ω—ã–π'),
        ('uncommon', '–ù–µ–æ–±—ã—á–Ω—ã–π'),
        ('rare', '–†–µ–¥–∫–∏–π'),
        ('very_rare', '–û—á–µ–Ω—å —Ä–µ–¥–∫–∏–π'),
        ('epic', '–≠–ø–∏—á–µ—Å–∫–∏–π'),
        ('legendary', '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π'),
        ('artifact', '–ê—Ä—Ç–µ—Ñ–∞–∫—Ç'),
    ]
    rarity = models.CharField(max_length=20, choices=RARITY_CHOICES, default='common', verbose_name="–†–µ–¥–∫–æ—Å—Ç—å")
    default_find_diff = models.IntegerField(default=0, verbose_name="–°–ª–æ–∂–Ω–æ—Å—Ç—å –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    # üîó –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –∫–∞—Ä—Ç–µ
    map = models.ForeignKey('Map', on_delete=models.CASCADE, related_name='items', null=True, blank=True, verbose_name="–ö–∞—Ä—Ç–∞")

    # üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    x = models.FloatField(blank=True, null=True, verbose_name="–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X")
    y = models.FloatField(blank=True, null=True, verbose_name="–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y")

    # ‚öîÔ∏è –ë–æ–µ–≤–∞—è –º–µ—Ö–∞–Ω–∏–∫–∞
    damage = models.CharField(max_length=50, blank=True, null=True, verbose_name="–£—Ä–æ–Ω")
    armor_bonus = models.IntegerField(default=0, verbose_name="–ë–æ–Ω—É—Å –∫ –±—Ä–æ–Ω–µ")
    effect = models.TextField(blank=True, null=True, verbose_name="–≠—Ñ—Ñ–µ–∫—Ç")
    is_magical = models.BooleanField(default=False, verbose_name="–ú–∞–≥–∏—á–µ—Å–∫–∏–π")

    # üé≠ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
    is_consumable = models.BooleanField(default=False, verbose_name="–†–∞—Å—Ö–æ–¥—É–µ–º—ã–π")
    charges = models.IntegerField(default=0, verbose_name="–ó–∞—Ä—è–¥—ã")
    max_charges = models.IntegerField(default=0, verbose_name="–ú–∞–∫—Å–∏–º—É–º –∑–∞—Ä—è–¥–æ–≤")
    slot_type = models.CharField(
        max_length=50,
        choices=[
            ('head', '–ì–æ–ª–æ–≤–∞'),
            ('body', '–¢–µ–ª–æ'),
            ('weapon', '–û—Ä—É–∂–∏–µ'),
            ('accessory', '–ê–∫—Å–µ—Å—Å—É–∞—Ä'),
        ],
        blank=True,
        null=True,
        verbose_name="–°–ª–æ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏"
    )

    # üß† –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    requirements = models.TextField(blank=True, null=True, verbose_name="–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è")
    usable_by = models.JSONField(default=list, blank=True, verbose_name="–ö–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")

    # üß¨ –ù–∞—Ä—Ä–∞—Ç–∏–≤ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
    flavor_text = models.CharField(max_length=200, blank=True, null=True, verbose_name="–§–ª—ç–π–≤–æ—Ä-—Ç–µ–∫—Å—Ç")
    lore = models.TextField(blank=True, null=True, verbose_name="–õ–æ—Ä")
    is_unique = models.BooleanField(default=False, verbose_name="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π")

    # üõ° –í–µ—Å –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å
    weight = models.FloatField(default=0.0, verbose_name="–í–µ—Å")
    value = models.IntegerField(default=0, verbose_name="–¶–µ–Ω–Ω–æ—Å—Ç—å (–∑–æ–ª–æ—Ç–æ)")

    # üåê –°—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–º–µ—Ç–∞
    is_quest_item = models.BooleanField(default=False, verbose_name="–ö–≤–µ—Å—Ç–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç")

    class Meta:
        verbose_name = "–ü—Ä–µ–¥–º–µ—Ç"
        verbose_name_plural = "–ü—Ä–µ–¥–º–µ—Ç—ã"

# –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ –∫–∞—Ä—Ç–µ 
class ItemInstance(models.Model):
    item = models.ForeignKey(Item, on_delete=models.CASCADE, related_name='instances', verbose_name="–®–∞–±–ª–æ–Ω –ø—Ä–µ–¥–º–µ—Ç–∞")
    map = models.ForeignKey('Map', on_delete=models.CASCADE, related_name='item_instances', verbose_name="–ö–∞—Ä—Ç–∞")
    room = models.ForeignKey('Room', on_delete=models.SET_NULL, null=True, blank=True, related_name='item_instances', verbose_name="–ö–æ–º–Ω–∞—Ç–∞")
    x = models.FloatField(blank=True, null=True, verbose_name="–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X")
    y = models.FloatField(blank=True, null=True, verbose_name="–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y")
    quantity = models.IntegerField(default=1, verbose_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    is_taken = models.BooleanField(default=False, verbose_name="–ü–æ–¥–Ω—è—Ç —Å –∫–∞—Ä—Ç—ã")
    is_hidden = models.BooleanField(default= True , verbose_name="–°–ø—Ä—è—Ç–∞–Ω?")
    find_diff = models.IntegerField(null=True, blank=True, verbose_name="–°–ª–æ–∂–Ω–æ—Å—Ç—å –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è")
    taken_by = models.ForeignKey(
        'Shape',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name='taken_items',
        verbose_name="–ö—Ç–æ –ø–æ–¥–Ω—è–ª –ø—Ä–µ–¥–º–µ—Ç"
    )
    class Meta:
        verbose_name = "–≠–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–µ"
        verbose_name_plural = "–≠–∫–∑–µ–º–ø–ª—è—Ä—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ"
    def save(self, *args, **kwargs):
        if self.find_diff is None:
            self.find_diff = self.item.default_find_diff
        super().save(*args, **kwargs)


class RoomPlayer(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    room = models.ForeignKey(Room, on_delete=models.CASCADE)
    joined_at = models.DateTimeField(auto_now_add=True)

class Shape(models.Model):
    SHAPE_TYPES = [
        ('star', 'Star'),
        ('circle', 'Circle'),
        ('rectangle', 'Rectangle'),
    ]
    room = models.ForeignKey(Room, on_delete=models.SET_NULL, null=True, blank=True)
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    name = models.CharField(max_length=100, blank=True, null=True, verbose_name="–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
    user = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    owner = models.ForeignKey(
        User,
        null=True,
        blank=True,
        on_delete=models.SET_NULL,
        related_name="controlled_shapes",
        verbose_name="–ò–≥—Ä–æ–∫, —É–ø—Ä–∞–≤–ª—è—é—â–∏–π —Å—É—â–Ω–æ—Å—Ç—å—é"
    ) 
    level = models.IntegerField(default=1, verbose_name="–£—Ä–æ–≤–µ–Ω—å")
    max_hp = models.IntegerField(default=10, verbose_name="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ HP")
    current_hp = models.IntegerField(default=10, verbose_name="–¢–µ–∫—É—â–∏–µ HP")
    temp_hp = models.IntegerField(default=0, verbose_name="–í—Ä–µ–º–µ–Ω–Ω—ã–µ HP")  # –ù–æ–≤–æ–µ –ø–æ–ª–µ
    speed = models.IntegerField(default=30, verbose_name="–°–∫–æ—Ä–æ—Å—Ç—å")
    armor_class = models.IntegerField(default=10, verbose_name="–ö–ª–∞—Å—Å –±—Ä–æ–Ω–∏")
    attack_bonus = models.IntegerField(default=0, verbose_name="–ë–æ–Ω—É—Å –∞—Ç–∞–∫–∏")
    damage = models.CharField(max_length=20, blank=True, null=True, verbose_name="–£—Ä–æ–Ω")
    # –ì–µ–æ–º–µ—Ç—Ä–∏—è –∏ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ
    current_map = models.ForeignKey('Map', on_delete=models.SET_NULL, null=True, related_name='current_map')
    map = models.ForeignKey('Map', on_delete=models.CASCADE, related_name="shapes", null=True, blank=True)
    type = models.CharField(max_length=50, choices=SHAPE_TYPES)
    x = models.FloatField()
    y = models.FloatField()
    rotation = models.FloatField(default=0)
    fill = models.CharField(max_length=20, default="#FFFFFF")
    stroke = models.CharField(max_length=20, blank=True, null=True)
    stroke_width = models.FloatField(default=1.0)
    num_points = models.IntegerField(blank=True, null=True)
    inner_radius = models.FloatField(blank=True, null=True)
    outer_radius = models.FloatField(blank=True, null=True)
    image = models.ImageField(upload_to='shapes/', null=True, blank=True)
    wiewField = models.IntegerField(blank=True, null=True, default=60)
    is_clone = models.BooleanField(default=False)
    isPlayer = models.BooleanField(default=False)
    is_npc = models.BooleanField(default=False)

    # –°–æ–∑–¥–∞–Ω–æ
    created_at = models.DateTimeField(auto_now_add=True)

    # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    strength = models.IntegerField(default=10)
    dexterity = models.IntegerField(default=10)
    constitution = models.IntegerField(default=10)
    intelligence = models.IntegerField(default=10)
    wisdom = models.IntegerField(default=10)
    charisma = models.IntegerField(default=10)

    # –°–ø–∞—Å–±—Ä–æ—Å–∫–∏ (–æ—Å–Ω–æ–≤–Ω—ã–µ)
    str_save = models.IntegerField(default=0)
    dex_save = models.IntegerField(default=0)
    con_save = models.IntegerField(default=0)
    int_save = models.IntegerField(default=0)
    wis_save = models.IntegerField(default=0)
    cha_save = models.IntegerField(default=0)

    # –°–ø–∞—Å–±—Ä–æ—Å–∫–∏ —Å –ø—Ä–æ—Ñ–∏—Ü–∏—Ç–Ω–æ—Å—Ç—å—é
    strength_save_proficient = models.BooleanField(default=False)
    dexterity_save_proficient = models.BooleanField(default=False)
    constitution_save_proficient = models.BooleanField(default=False)
    intelligence_save_proficient = models.BooleanField(default=False)
    wisdom_save_proficient = models.BooleanField(default=False)
    charisma_save_proficient = models.BooleanField(default=False)

    # –ù–∞–≤—ã–∫–∏ –∏ –ø—Ä–æ—Ñ–∏—Ü–∏—Ç–Ω–æ—Å—Ç–∏
    athletics_proficient = models.BooleanField(default=False)
    acrobatics_proficient = models.BooleanField(default=False)
    sleight_of_hand_proficient = models.BooleanField(default=False)
    stealth_proficient = models.BooleanField(default=False)
    investigation_proficient = models.BooleanField(default=False)
    history_proficient = models.BooleanField(default=False)
    arcana_proficient = models.BooleanField(default=False)
    nature_proficient = models.BooleanField(default=False)
    religion_proficient = models.BooleanField(default=False)
    perception_proficient = models.BooleanField(default=False)
    survival_proficient = models.BooleanField(default=False)
    medicine_proficient = models.BooleanField(default=False)
    insight_proficient = models.BooleanField(default=False)
    animal_handling_proficient = models.BooleanField(default=False)
    performance_proficient = models.BooleanField(default=False)
    intimidation_proficient = models.BooleanField(default=False)
    deception_proficient = models.BooleanField(default=False)
    persuasion_proficient = models.BooleanField(default=False)

    # –†–æ–ª–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    background = models.TextField(blank=True, null=True)
    personality_traits = models.TextField(blank=True, null=True)
    ideals = models.TextField(blank=True, null=True)
    bonds = models.TextField(blank=True, null=True)
    flaws = models.TextField(blank=True, null=True)
    appearance = models.TextField(blank=True, null=True)
    allies = models.TextField(blank=True, null=True)
    notes = models.TextField(blank=True, null=True)
    achievements = models.TextField(blank=True, null=True)
    past_experiences = models.TextField(blank=True, null=True)

    # –ü–æ–≤–µ–¥–µ–Ω–∏–µ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
    alignment = models.CharField(max_length=50, blank=True, null=True)
    fears = models.TextField(blank=True, null=True)
    motivations = models.TextField(blank=True, null=True)
    reputation = models.TextField(blank=True, null=True)

    # –§–∏–∑–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    notable_features = models.TextField(blank=True, null=True)
    conditions = models.TextField(blank=True, null=True)
    age = models.IntegerField(blank=True, null=True)
    height = models.CharField(max_length=20, blank=True, null=True)
    weight = models.CharField(max_length=20, blank=True, null=True)
    gender = models.CharField(max_length=50, blank=True, null=True)
    pronouns = models.CharField(max_length=50, blank=True, null=True)

    # –ë–æ–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
    fighting_style = models.CharField(max_length=100, blank=True, null=True)
    known_spells_text = models.TextField(blank=True, null=True)
    equipment_text = models.TextField(blank=True, null=True)
    resistances = models.TextField(blank=True, null=True)
    vulnerabilities = models.TextField(blank=True, null=True)

    # –ü–æ–≤–µ—Å—Ç–≤–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
    rumors = models.TextField(blank=True, null=True)
    quotes = models.TextField(blank=True, null=True)
    memories = models.TextField(blank=True, null=True)
    legacy = models.TextField(blank=True, null=True)

    # –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –º–∏—Ä–æ–º
    home_town = models.CharField(max_length=100, blank=True, null=True)
    patrons = models.TextField(blank=True, null=True)
    rivalries = models.TextField(blank=True, null=True)
    quests = models.TextField(blank=True, null=True)

    # –ü—Å–∏—Ö–∏—á–µ—Å–∫–æ–µ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    sanity = models.IntegerField(default=100)
    insanity = models.TextField(blank=True, null=True)
    mood = models.CharField(max_length=50, blank=True, null=True)

    # –ú–µ—Ö–∞–Ω–∏–∫–∞ –±–æ—è –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏
    initiative = models.IntegerField(default=0)
    proficiency_bonus = models.IntegerField(default=2)
    hit_dice = models.CharField(max_length=20, blank=True, null=True)
    death_saves_success = models.IntegerField(default=0)
    death_saves_fail = models.IntegerField(default=0)

    # –ú–∞–≥–∏—è
    spell_slots_total = models.IntegerField(default=0)
    spell_slots_used = models.IntegerField(default=0)
    known_cantrips = models.TextField(blank=True, null=True)
    prepared_spells = models.TextField(blank=True, null=True)

    # –°–ø–∞—Å–±—Ä–æ—Å–∫–∏ –∏ –Ω–∞–≤—ã–∫–∏
    saving_throws = models.JSONField(default=dict)
    skills = models.JSONField(default=dict)

    # –û—á–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è
    max_ap = models.IntegerField(default=3)
    current_ap = models.IntegerField(default=3)

    # –°—Ç–∞—Ç—É—Å—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    statuses = models.JSONField(default=list)
    is_invisible = models.BooleanField(default=False)
    is_stunned = models.BooleanField(default=False)
    is_paralyzed = models.BooleanField(default=False)
    reaction_used = models.BooleanField(default=False)
    extra_attacks = models.IntegerField(default=0)

    # –≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞
    head_slot = models.ForeignKey('Item', on_delete=models.SET_NULL, null=True, blank=True, related_name='equipped_on_head')
    body_slot = models.ForeignKey('Item', on_delete=models.SET_NULL, null=True, blank=True, related_name='equipped_on_body')
    weapon_slot = models.ForeignKey('Item', on_delete=models.SET_NULL, null=True, blank=True, related_name='equipped_as_weapon')

    # –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å —á–µ—Ä–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é –º–æ–¥–µ–ª—å InventoryItem
    inventory = models.ManyToManyField('Item', through='InventoryItem', related_name='owners')

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    created_from_test = models.BooleanField(default=False)
    emotion_override = models.CharField(max_length=50, blank=True, null=True)
    favorite_gifs = models.JSONField(default=list)
    tags = models.JSONField(default=list, blank=True)
    experience = models.IntegerField(default=0)
    is_dead = models.BooleanField(default=False)
    is_permanently_dead = models.BooleanField(default=False, verbose_name="–ü–µ—Ä—Å–æ–Ω–∞–∂ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –º—ë—Ä—Ç–≤")
    permadeath = models.BooleanField(default=False, verbose_name="–ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–∞—è —Å–º–µ—Ä—Ç—å")
    is_public = models.BooleanField(default=False, verbose_name="–ü—É–±–ª–∏—á–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂")

    # –°–≤—è–∑–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Å—É—â–Ω–æ—Å—Ç—è–º–∏
    race = models.ForeignKey('Race', on_delete=models.SET_NULL, null=True, blank=True, verbose_name="–†–∞—Å–∞")
    character_class = models.ForeignKey('CharacterClass', on_delete=models.SET_NULL, null=True, blank=True, verbose_name="–ö–ª–∞—Å—Å")
    spells = models.ManyToManyField('Spell', blank=True, related_name="characters", verbose_name="–ò–∑—É—á–µ–Ω–Ω—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è")
    attacks = models.ManyToManyField('Attack', blank=True, related_name='shapes', verbose_name="–ê—Ç–∞–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")

    # –î–µ–π—Å—Ç–≤–∏—è
    main_action = models.CharField(max_length=100, blank=True, null=True)
    bonus_action = models.CharField(max_length=100, blank=True, null=True)
    movement_used = models.IntegerField(default=0)
    free_interaction_used = models.BooleanField(default=False)

    def __str__(self):
        return self.name or f"Shape #{self.id}"

    class Meta:
        verbose_name = "–°—É—â–Ω–æ—Å—Ç—å / –ü–µ—Ä—Å–æ–Ω–∞–∂"
        verbose_name_plural = "–°—É—â–Ω–æ—Å—Ç–∏ / –ü–µ—Ä—Å–æ–Ω–∞–∂–∏"

from django.db import models




class InventoryItem(models.Model):
    shape = models.ForeignKey(Shape, on_delete=models.CASCADE, related_name='inventory_items')

    item = models.ForeignKey(Item, on_delete=models.CASCADE)
    quantity = models.IntegerField(default=1)
    equipped = models.BooleanField(default=False)  # –µ—Å–ª–∏ —ç—Ç–æ –º–µ—á –∏–ª–∏ –±—Ä–æ–Ω—è
    is_quick_slot = models.BooleanField(default=False)  # –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ "–±—ã—Å—Ç—Ä–æ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ"

    def __str__(self):
        return f"{self.item.name} x{self.quantity} ({self.shape})"






class PlayerInSession(models.Model):
    session = models.ForeignKey(
        GameSession,
        on_delete=models.CASCADE,
        related_name='players'  # üëà —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —É–¥–æ–±–Ω–æ session.players.all()
    )
    user = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    )
    character = models.ForeignKey(
        Shape,
        on_delete=models.CASCADE,
        verbose_name="–ü–µ—Ä—Å–æ–Ω–∞–∂"
    )
    joined_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ('session', 'user')  # –û–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Å–µ—Å—Å–∏–∏
        verbose_name = "–ò–≥—Ä–æ–∫ –≤ —Å–µ—Å—Å–∏–∏"
        verbose_name_plural = "–ò–≥—Ä–æ–∫–∏ –≤ —Å–µ—Å—Å–∏—è—Ö"

    def __str__(self):
        return f"{self.user.username} –≤ —Å–µ—Å—Å–∏–∏ {self.session.id}"

 