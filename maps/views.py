from rest_framework import viewsets, generics, status, permissions
from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework.permissions import IsAuthenticated
from rest_framework.generics import UpdateAPIView
from django.shortcuts import get_object_or_404
from channels.layers import get_channel_layer
from asgiref.sync import async_to_sync
from rest_framework.viewsets import ModelViewSet
from rest_framework.parsers import MultiPartParser, FormParser
from rest_framework.generics import CreateAPIView
from django.db import models
from rest_framework.decorators import action
from django_filters.rest_framework import DjangoFilterBackend
# –ú–æ–¥–µ–ª–∏
from .models import Map, GameSession, PlayerInSession, Room, Shape, User, Spell, CharacterClass, Race, Item, Attack, ItemInstance, MapPointImage
from .models import MapPoint
# –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä—ã
from .serializers import (
    MapSerializer, RoomSerializer, ShapeSerializer, ShapeImageSerializer,
    SpellSerializer, CharacterClassSerializer,
    RaceSerializer, ItemSerializer, AttackSerializer, ItemInstanceSerializer , MapPointSerializer
)
from django.forms.models import model_to_dict
import json
# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

def broadcast_shape_update(shape, action):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã —á–µ—Ä–µ–∑ WebSocket"""
    channel_layer = get_channel_layer()
    group_name = f"map_{shape.current_map_id}" if shape.current_map_id else "map_global"
    
    payload = {
        "type": "broadcast_event",
        "action": action,
        "payload": ShapeSerializer(shape).data if action != "delete" else {"id": shape.id}
    }
    
    async_to_sync(channel_layer.group_send)(group_name, payload)

# ==================== –ö–ê–†–¢–´ (MAPS) ====================

class MapViewSet(ModelViewSet):
    """
    ViewSet –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–∞–º–∏ (CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏)
    - –°–æ–∑–¥–∞–Ω–∏–µ, —á—Ç–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã —Å —Ñ–∏–≥—É—Ä–∞–º–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ
    """
    queryset = Map.objects.all()
    serializer_class = MapSerializer
    permission_classes = [permissions.IsAuthenticated]
    def get_queryset(self):
        user = self.request.user
        return self.queryset.filter(
            models.Q(user=user) |
            models.Q(id__in=PlayerInSession.objects.filter(user=user).values_list('session__map_id', flat=True))
        )

    def get_object(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç–µ"""
        obj = super().get_object()
        user = self.request.user

        # –î–æ—Å—Ç—É–ø –µ—Å—Ç—å —É –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Å—Å–∏–∏
        if obj.user == user:
            return obj

        if PlayerInSession.objects.filter(session__map=obj, user=user).exists():
            return obj

        raise PermissionDenied("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–∞—Ä—Ç–µ.")

    def retrieve(self, request, *args, **kwargs):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã —Å–æ –≤—Å–µ–º–∏ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ñ–∏–≥—É—Ä–∞–º–∏"""
        map_instance = self.get_object()
        serializer = self.get_serializer(map_instance)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∏–≥—É—Ä—ã –Ω–∞ —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç–µ
        session_shapes = Shape.objects.filter(current_map=map_instance)
        session_shapes_data = ShapeSerializer(session_shapes, many=True).data

        response_data = serializer.data
        response_data['session_shapes'] = session_shapes_data
        return Response(response_data)


class MapDetailAPIView(APIView):
    """–î–µ—Ç–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ–π —á–µ—Ä–µ–∑ API (GET/POST/PUT)"""
    permission_classes = [IsAuthenticated]

    def get(self, request, pk):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ä—Ç–µ"""
        map_instance = get_object_or_404(Map, pk=pk)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if not (map_instance.user == request.user or 
                PlayerInSession.objects.filter(session__map=map_instance, user=request.user).exists()):
            return Response({"detail": "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞"}, status=403)
        
        serializer = MapSerializer(map_instance)
        return Response(serializer.data)

    def post(self, request, pk):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã"""
        serializer = MapSerializer(data=request.data)
        if serializer.is_valid():
            user = get_object_or_404(User, pk=pk)
            serializer.save(user=user)
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    def put(self, request, pk):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ä—Ç—ã"""
        map_instance = get_object_or_404(Map, pk=pk, user=request.user)
        serializer = MapSerializer(map_instance, data=request.data)
        
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class MapUploadImage(APIView):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ñ–∏–≥—É—Ä—ã –Ω–∞ –∫–∞—Ä—Ç–µ"""
    permission_classes = [IsAuthenticated]

    def post(self, request, pk):
        shape = get_object_or_404(Shape, pk=pk)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if not (shape.owner == request.user or 
                shape.user == request.user or 
                shape.map.user == request.user):
            return Response({"error": "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞"}, status=403)

        serializer = ShapeImageSerializer(shape, data=request.data, partial=True)
        if serializer.is_valid():
            serializer.save()
            return Response({"image_url": shape.image.url}, status=status.HTTP_200_OK)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


# ==================== –§–ò–ì–£–†–´ (SHAPES) ====================

class ShapeListView(APIView):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∏–≥—É—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã"""
    def get(self, request, map_id):
        shapes = Shape.objects.filter(map_id=map_id)
        serializer = ShapeSerializer(shapes, many=True)
        return Response(serializer.data)


class ShapeDetailView(APIView):
    """–î–µ—Ç–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ñ–∏–≥—É—Ä–æ–π"""
    def get(self, request, pk):
        shape = get_object_or_404(Shape, pk=pk)
        serializer = ShapeSerializer(shape)
        return Response(serializer.data)

    def patch(self, request, pk):
        """–ß–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã"""
        shape = Shape.objects.get(pk=pk)
        serializer = ShapeSerializer(shape, data=request.data, partial=True)
        
        if serializer.is_valid():
            serializer.save()
            broadcast_shape_update(shape, "update")
            return Response(serializer.data)
        return Response(serializer.errors, status=400)

    def delete(self, request, pk):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã"""
        shape = Shape.objects.get(pk=pk)
        shape_id = shape.id
        map_id = shape.map_id
        shape.delete()
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
        broadcast_shape_update(shape, "delete")
        return Response({"detail": "–§–∏–≥—É—Ä–∞ —É–¥–∞–ª–µ–Ω–∞"})


class ShapeCreateView(APIView):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ–∏–≥—É—Ä—ã"""
    permission_classes = [IsAuthenticated]

    def post(self, request):
        serializer = ShapeSerializer(data=request.data)
        if serializer.is_valid():
            shape = serializer.save(user=request.user, owner=request.user)
            
            # –ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç–µ
            if not shape.current_map:
                shape.current_map = shape.map
                shape.save(update_fields=['current_map'])
            print("üßæ Shape —Å–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:", request.user.id)
            print("üßæ Owner ID:", shape.owner_id)
            print("üßæ Current WS-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å—Å—è —Å —ç—Ç–∏–º ID")
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
            broadcast_shape_update(shape, "create")
            return Response(ShapeSerializer(shape).data, status=201)
        return Response(serializer.errors, status=400)


EXCLUDED_FIELDS = {
    'id', 'pk', 'created_at', 'updated_at',
    'user', 'owner', 'current_map', 'map',
    'inventory', 'spells', 'attacks', 'image',
}

def clone_shape(original: Shape, overrides: dict = None) -> Shape:
    overrides = overrides or {}

    original_dict = model_to_dict(original)

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–ª—å–∑—è –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é
    for field in EXCLUDED_FIELDS:
        original_dict.pop(field, None)

    # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º FK-–æ–±—ä–µ–∫—Ç—ã, –∞ –Ω–µ id
    if original.race:
        original_dict['race'] = original.race
    if original.character_class:
        original_dict['character_class'] = original.character_class
    if original.head_slot:
        original_dict['head_slot'] = original.head_slot
    if original.body_slot:
        original_dict['body_slot'] = original.body_slot
    if original.weapon_slot:
        original_dict['weapon_slot'] = original.weapon_slot

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å overrides (–≤—Å—ë, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤—Ä—É—á–Ω—É—é)
    clone_data = {
        **original_dict,
        'is_clone': True,
        **overrides
    }

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–æ–Ω–∞
    clone = Shape.objects.create(**clone_data)

    # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ M2M-–ø–æ–ª–µ–π
    clone.spells.set(original.spells.all())
    clone.attacks.set(original.attacks.all())

    return clone


class ShapeDetailAPIView(APIView):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä–∞–º–∏ (GET/PUT/PATCH/DELETE)"""
    permission_classes = [IsAuthenticated]

    def _check_access(self, shape, user):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∏–≥—É—Ä–µ"""
        return (
            shape.owner == user or
            shape.user == user or
            (shape.current_map and shape.current_map.user == user)
        )

    def get(self, request, pk):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–≥—É—Ä–µ"""
        shape = get_object_or_404(Shape, pk=pk)
        if not self._check_access(shape, request.user):
            return Response({"detail": "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞"}, status=403)
        serializer = ShapeSerializer(shape)
        return Response(serializer.data)

    def put(self, request, pk):
        """–ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã"""
        shape = get_object_or_404(Shape, pk=pk)
        if not self._check_access(shape, request.user):
            return Response({"detail": "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞"}, status=403)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        shape_data = request.data.get('shapes')
        if isinstance(shape_data, list) and shape_data:
            shape_data = shape_data[0]
        else:
            shape_data = request.data

        serializer = ShapeSerializer(shape, data=shape_data)
        if serializer.is_valid():
            serializer.save()
            broadcast_shape_update(shape, "update")
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    def patch(self, request, pk):
        """–ß–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã"""
        shape = get_object_or_404(Shape, pk=pk)
        
        print("üîç –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã —Å ID:", pk)
        print("üîç –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ (—Å—ã—Ä—ã–µ):", request.data)

        if not self._check_access(shape, request.user):
            print("üö´ –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", request.user)
            return Response({"detail": "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞"}, status=403)

        shape_data = request.data.get('shapes', [request.data])[0]
        print("üîç –î–∞–Ω–Ω—ã–µ, –ø–æ—Å—Ç—É–ø–∞—é—â–∏–µ –≤ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä:", shape_data)

        serializer = ShapeSerializer(shape, data=shape_data, partial=True)

        if serializer.is_valid():
            serializer.save()
            print("‚úÖ –§–∏–≥—É—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:", serializer.data)
            broadcast_shape_update(shape, "update")
            return Response(serializer.data)

        print("‚ùå –û—à–∏–±–∫–∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∏–≥—É—Ä—ã:", serializer.errors)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


    def delete(self, request, pk):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã"""
        shape = get_object_or_404(Shape, pk=pk)
        if not self._check_access(shape, request.user):
            return Response({"detail": "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞"}, status=403)
        
        shape.delete()
        broadcast_shape_update(shape, "delete")
        return Response({"detail": "–§–∏–≥—É—Ä–∞ —É–¥–∞–ª–µ–Ω–∞"}, status=status.HTTP_204_NO_CONTENT)


class EntityEditing(APIView):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π (—Ñ–∏–≥—É—Ä)"""
    permission_classes = [IsAuthenticated]

    def patch(self, request, pk):
        """–ß–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏"""
        shape = get_object_or_404(Shape, pk=pk)
        serializer = ShapeSerializer(shape, data=request.data, partial=True)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    def get(self, request, pk):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—É—â–Ω–æ—Å—Ç–∏"""
        shape = get_object_or_404(Shape, pk=pk)
        serializer = ShapeSerializer(shape)
        return Response(serializer.data)
class ShapeCloneView(APIView):
    def post(self, request):
        shape_id = request.data.get('shape_id')
        map_id = request.data.get('map_id')
        x = request.data.get('x')
        y = request.data.get('y')
        room_id = request.data.get('room_id')

        if not all([shape_id, map_id, x, y]):
            return Response({'error': 'Missing required fields'}, status=400)

        try:
            original = Shape.objects.get(id=shape_id)
        except Shape.DoesNotExist:
            return Response({'error': 'Shape not found'}, status=404)

        try:
            room = Room.objects.get(id=room_id) if room_id else None
        except Room.DoesNotExist:
            return Response({'error': 'Room not found'}, status=404)

        clone = clone_shape(
            original,
            overrides={
                'name': f"{original.name} (–∫–æ–ø–∏—è)" if original.name else "–ö–ª–æ–Ω",
                'x': x,
                'y': y,
                'map_id': map_id,
                'current_map_id': map_id,
                'user_id': original.user_id,
                'room': room,
            }
        )

        return Response(ShapeSerializer(clone).data, status=201)
# ==================== –ö–û–ú–ù–ê–¢–´ (ROOMS) ====================

class RoomView(APIView):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç –¥–ª—è –∫–∞—Ä—Ç—ã"""
    permission_classes = [IsAuthenticated]

    def get(self, request, pk):
        rooms = Room.objects.filter(map_id=pk, map__user=request.user)
        serializer = RoomSerializer(rooms, many=True)
        return Response(serializer.data)


class SingleRoomView(APIView):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ"""
    permission_classes = [IsAuthenticated]

    def get(self, request, pk):
        room = get_object_or_404(Room, pk=pk)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        is_owner = room.map.user == request.user
        is_player = PlayerInSession.objects.filter(
            session__map=room.map, user=request.user
        ).exists()

        if not is_owner and not is_player:
            return Response({"detail": "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ."}, status=403)

        serializer = RoomSerializer(room)
        return Response(serializer.data)

    def delete(self, request, pk):
        try:
            room = Room.objects.get(pk=pk)
            room.delete()
            return Response(status=status.HTTP_204_NO_CONTENT)
        except Room.DoesNotExist:
            return Response({'error': '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}, status=status.HTTP_404_NOT_FOUND)


class CreateNewRoomView(CreateAPIView):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã"""
    permission_classes = [IsAuthenticated]
    serializer_class = RoomSerializer
    parser_classes = [MultiPartParser, FormParser]

    def create(self, request, *args, **kwargs):
        map_instance = get_object_or_404(Map, pk=self.kwargs['pk'], user=self.request.user)
        serializer = self.get_serializer(data=request.data)
        
        if serializer.is_valid():
            serializer.save(map=map_instance)
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


# ==================== –ò–ì–†–û–í–´–ï –°–ï–°–°–ò–ò ====================

class CreateURLView(APIView):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –∏ URL –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    permission_classes = [IsAuthenticated]

    def post(self, request, pk):
        map_instance = get_object_or_404(Map, pk=pk, user=request.user)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–∫—Ä—ã—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã
        if last_room_id := request.data.get('last_opened_room_id'):
            map_instance.last_opened_room_id = last_room_id
            map_instance.save()

        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
        session = GameSession.objects.create(
            map=map_instance,
            owner=request.user,
            name="–°–µ—Å—Å–∏—è"
        )

        return Response({
            "session_id": str(session.id),
            "join_url": f'http://localhost:3000/join/{session.id}/',
            "session_players": [user.username for user in session.players.all()]
        })


class JoinGameView(APIView):
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
    permission_classes = [IsAuthenticated]

    def get(self, request, session_id):
        session = get_object_or_404(GameSession, id=session_id)
        user = request.user

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user == session.owner:
            return Response({"role": "master", "map_id": session.map.id})

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–≥—É—Ä—ã –¥–ª—è –∏–≥—Ä–æ–∫–∞
        available_shapes = Shape.objects.filter(owner=user)
        return Response({
            "role": "player",
            "map_id": session.map.id,
            "available_shapes": [{"id": s.id, "name": s.name} for s in available_shapes]
        })


class JoinSessionWithShapeView(APIView):
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å–µ—Å—Å–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ–∏–≥—É—Ä—ã"""
    permission_classes = [IsAuthenticated]

    def post(self, request, session_id):
        shape_id = request.data.get("shape_id")
        if not shape_id:
            return Response({"error": "shape_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"}, status=400)

        session = get_object_or_404(GameSession, id=session_id)
        user = request.user

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if PlayerInSession.objects.filter(session=session, user=user).exists():
            return Response({"detail": "–í—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏"}, status=400)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–≥—É—Ä—ã
        shape = get_object_or_404(Shape, id=shape_id)
        if shape.owner != user and shape.user != user:
            return Response({"detail": "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∏–≥—É—Ä–µ"}, status=403)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã
        shape.owner = user
        shape.current_map = session.map
        shape.save()

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∏ –∏–≥—Ä–æ–∫–∞ —Å —Å–µ—Å—Å–∏–µ–π
        PlayerInSession.objects.create(session=session, user=user, character=shape)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ WebSocket
        channel_layer = get_channel_layer()
        async_to_sync(channel_layer.group_send)(
            f"map_{session.map.id}",
            {
                "type": "broadcast_event",
                "action": "session_update",
                "payload": {"detail": "–ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è", "shape_id": shape.id}
            }
        )
        
        async_to_sync(channel_layer.group_send)(
            f"map_{session.map.id}",
            {
                "type": "broadcast_event",
                "action": "turn_order_update",
                "payload": {"new_shape_id": shape.id}
            }
        )
        
        async_to_sync(channel_layer.group_send)(
            f"map_{session.map.id}",
            {
                "type": "broadcast_event",
                "action": "create",
                "payload": ShapeSerializer(shape).data
            }
        )

        return Response({
            "detail": "–£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å",
            "map_id": session.map.id
        }, status=200)


class SessionPlayersView(APIView):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–µ—Å—Å–∏–∏"""
    permission_classes = [IsAuthenticated]

    def get(self, request, session_id):
        session = get_object_or_404(GameSession, id=session_id)
        players = PlayerInSession.objects.filter(session=session).select_related('user', 'character')

        data = []
        for player in players:
            data.append({
                'username': player.user.username,
                'character': ShapeSerializer(player.character).data
            })

        return Response(data)


# ==================== –¢–û–ß–ö–ò –ò–ù–¢–ï–†–ï–°–ê (POI) ====================

class PointOfInterestViewSet(viewsets.ModelViewSet):
    queryset = MapPoint.objects.all()
    serializer_class = MapPointSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        return MapPoint.objects.filter(map__user=self.request.user)

    def perform_create(self, serializer):
        map_id = self.request.data.get('map')
        map_instance = get_object_or_404(Map, pk=map_id, user=self.request.user)
        serializer.save(map=map_instance)

    def perform_update(self, serializer):
        instance = serializer.save()

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞
        images_order = self.request.data.get('images_order')
        if images_order:
            for img in json.loads(images_order):
                MapPointImage.objects.filter(id=img['id'], point=instance).update(order=img['order'])

        # –£–¥–∞–ª–µ–Ω–∏–µ
        deleted = self.request.data.get('deleted_images')
        if deleted:
            MapPointImage.objects.filter(id__in=json.loads(deleted), point=instance).delete()

        # –ù–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for file in self.request.FILES.getlist('new_images'):
            MapPointImage.objects.create(point=instance, image=file, order=instance.images.count())

        # –ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if 'image' in self.request.FILES:
            instance.image = self.request.FILES['image']
            instance.save()
    

# ==================== –ó–ê–ö–õ–ò–ù–ê–ù–ò–Ø (SPELLS) ====================

class SpellCreateView(generics.CreateAPIView):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π"""
    queryset = Spell.objects.all()
    serializer_class = SpellSerializer
    permission_classes = [permissions.IsAuthenticated]

    def perform_create(self, serializer):
        serializer.save(creator=self.request.user)


class SpellUpdateView(generics.UpdateAPIView):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π"""
    queryset = Spell.objects.all()
    serializer_class = SpellSerializer
    permission_classes = [permissions.IsAuthenticated]
    lookup_field = 'pk'


class SpellDeleteView(generics.DestroyAPIView):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π"""
    queryset = Spell.objects.all()
    serializer_class = SpellSerializer
    permission_classes = [permissions.IsAuthenticated]


class SpellByCreatorView(APIView):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π –ø–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é"""
    permission_classes = [IsAuthenticated]

    def get(self, request, creator_id):
        spells = Spell.objects.filter(creator=creator_id)
        serializer = SpellSerializer(spells, many=True)
        return Response(serializer.data)


# ==================== –ö–õ–ê–°–°–´ –ü–ï–†–°–û–ù–ê–ñ–ï–ô ====================

class ClassCreateView(generics.CreateAPIView):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
    queryset = CharacterClass.objects.all()
    serializer_class = CharacterClassSerializer
    permission_classes = [permissions.IsAuthenticated]

    def post(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        if serializer.is_valid():
            serializer.save(creator=self.request.user)
            return Response(serializer.data, status=201)
        return Response(serializer.errors, status=400)


class ClassUpdateView(generics.UpdateAPIView):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
    queryset = CharacterClass.objects.all()
    serializer_class = CharacterClassSerializer
    permission_classes = [permissions.IsAuthenticated]
    lookup_field = 'pk'


class ClassDeleteView(generics.DestroyAPIView):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
    queryset = CharacterClass.objects.all()
    serializer_class = CharacterClassSerializer
    permission_classes = [permissions.IsAuthenticated]


class ClassByCreatorView(APIView):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –ø–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é"""
    permission_classes = [IsAuthenticated]

    def get(self, request, creator_id):
        classes = CharacterClass.objects.filter(creator=creator_id)
        serializer = CharacterClassSerializer(classes, many=True)
        return Response(serializer.data)


# ==================== –†–ê–°–´ (RACES) ====================

class RaceCreateView(generics.CreateAPIView):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å"""
    queryset = Race.objects.all()
    serializer_class = RaceSerializer
    permission_classes = [permissions.IsAuthenticated]

    def post(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        if serializer.is_valid():
            serializer.save(creator=self.request.user)
            return Response(serializer.data, status=201)
        return Response(serializer.errors, status=400)


class RaceUpdateView(generics.UpdateAPIView):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å"""
    queryset = Race.objects.all()
    serializer_class = RaceSerializer
    permission_classes = [permissions.IsAuthenticated]
    lookup_field = 'pk'


class RaceDeleteView(generics.DestroyAPIView):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å"""
    queryset = Race.objects.all()
    serializer_class = RaceSerializer
    permission_classes = [permissions.IsAuthenticated]


class RaceByCreatorView(APIView):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å –ø–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é"""
    permission_classes = [IsAuthenticated]

    def get(self, request, creator_id):
        races = Race.objects.filter(creator=creator_id)
        serializer = RaceSerializer(races, many=True)
        return Response(serializer.data)


# ==================== –ü–†–ï–î–ú–ï–¢–´ (ITEMS) ====================

class ItemCreateView(generics.CreateAPIView):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    queryset = Item.objects.all()
    serializer_class = ItemSerializer
    permission_classes = [permissions.IsAuthenticated]

    def post(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        if serializer.is_valid():
            serializer.save(creator=self.request.user)
            return Response(serializer.data, status=201)
        return Response(serializer.errors, status=400)


class ItemUpdateView(generics.UpdateAPIView):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    queryset = Item.objects.all()
    serializer_class = ItemSerializer
    permission_classes = [permissions.IsAuthenticated]
    lookup_field = 'pk'


class ItemDeleteView(generics.DestroyAPIView):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    queryset = Item.objects.all()
    serializer_class = ItemSerializer
    permission_classes = [permissions.IsAuthenticated]


class ItemByCreatorView(APIView):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é"""
    permission_classes = [IsAuthenticated]

    def get(self, request, creator_id):
        try:
            creator_id = int(creator_id)
        except (ValueError, TypeError):
            return Response({"detail": "Invalid creator_id"}, status=400)

        items = Item.objects.filter(creator=creator_id)
        serializer = ItemSerializer(items, many=True)
        return Response(serializer.data)


class ItemByMapView(APIView):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ –∫–∞—Ä—Ç–µ"""
    permission_classes = [IsAuthenticated]

    def get(self, request, map_id):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ–π
        
        Args:
            map_id (int): ID –∫–∞—Ä—Ç—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            
        Returns:
            Response: –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–∞—Ä—Ç–æ–π
            items = Item.objects.filter(map__id=map_id)
            
            # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
            serializer = ItemSerializer(items, many=True)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
            return Response(serializer.data)
        
        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –ø–æ–Ω—è—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            return Response(
                {'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {str(e)}'},
                status=status.HTTP_400_BAD_REQUEST
            )


# ==================== –ê–¢–ê–ö–ò (ATTACKS) ====================

class AttackCreateView(generics.CreateAPIView):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ç–∞–∫"""
    queryset = Attack.objects.all()
    serializer_class = AttackSerializer
    permission_classes = [permissions.IsAuthenticated]

    def post(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        if serializer.is_valid():
            serializer.save(creator=self.request.user)
            return Response(serializer.data, status=201)
        return Response(serializer.errors, status=400)


class AttackUpdateView(generics.UpdateAPIView):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Ç–∞–∫"""
    queryset = Attack.objects.all()
    serializer_class = AttackSerializer
    permission_classes = [permissions.IsAuthenticated]
    lookup_field = 'pk'


class AttackDeleteView(generics.DestroyAPIView):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∞—Ç–∞–∫"""
    queryset = Attack.objects.all()
    serializer_class = AttackSerializer
    permission_classes = [permissions.IsAuthenticated]


class AttackByOwnerView(APIView):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ç–∞–∫ –ø–æ –≤–ª–∞–¥–µ–ª—å—Ü—É"""
    permission_classes = [IsAuthenticated]

    def get(self, request, creator_id):
        try:
            creator_id = int(creator_id)
        except (ValueError, TypeError):
            return Response({"detail": "Invalid creator_id"}, status=400)

        attacks = Attack.objects.filter(creator_id=creator_id)
        serializer = AttackSerializer(attacks, many=True)
        return Response(serializer.data)





class ItemInstanceViewSet(viewsets.ModelViewSet):
    queryset = ItemInstance.objects.all()
    serializer_class = ItemInstanceSerializer
    permission_classes = [permissions.IsAuthenticated]

    def perform_create(self, serializer):
        item_instance = serializer.save()

        # WebSocket —Å–æ–±—ã—Ç–∏–µ
        channel_layer = get_channel_layer()
        async_to_sync(channel_layer.group_send)(
            f"map_{item_instance.map_id}",
            {
                "type": "broadcast_event",
                "action": "item_create",
                "payload": ItemInstanceSerializer(item_instance).data,
            }
        )

    def perform_update(self, serializer):
        item_instance = serializer.save()

        # WebSocket —Å–æ–±—ã—Ç–∏–µ
        channel_layer = get_channel_layer()
        async_to_sync(channel_layer.group_send)(
            f"map_{item_instance.map_id}",
            {
                "type": "broadcast_event",
                "action": "item_update",
                "payload": ItemInstanceSerializer(item_instance).data,
            }
        )

    def perform_destroy(self, instance):
        map_id = instance.map_id
        item_id = instance.id
        instance.delete()

        # WebSocket —Å–æ–±—ã—Ç–∏–µ
        channel_layer = get_channel_layer()
        async_to_sync(channel_layer.group_send)(
            f"map_{map_id}",
            {
                "type": "broadcast_event",
                "action": "item_delete",
                "payload": {"id": item_id},
            }
        )


class ItemInstanceByMapView(APIView):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ"""
    permission_classes = [permissions.IsAuthenticated]

    def get(self, request, map_id):
        try:
            map_instance = Map.objects.get(pk=map_id)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
            if not (map_instance.user == request.user or
                    PlayerInSession.objects.filter(session__map=map_instance, user=request.user).exists()):
                return Response({"detail": "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–∞—Ä—Ç–µ"}, status=403)

            items = ItemInstance.objects.filter(map=map_instance)
            serializer = ItemInstanceSerializer(items, many=True)
            return Response(serializer.data)

        except Map.DoesNotExist:
            return Response({"detail": "–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}, status=404)
        except Exception as e:
            return Response({"error": str(e)}, status=400)


class ItemInstanceByRoomView(APIView):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ"""
    permission_classes = [permissions.IsAuthenticated]

    def get(self, request, map_id, room_id):
        try:
            map_instance = Map.objects.get(pk=map_id)
            room_instance = Room.objects.get(pk=room_id)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
            if map_instance.user != request.user:
                return Response({"detail": "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–∞—Ä—Ç–µ"}, status=403)

            items = ItemInstance.objects.filter(map=map_instance, room=room_instance)
            serializer = ItemInstanceSerializer(items, many=True)
            return Response(serializer.data)

        except (Map.DoesNotExist, Room.DoesNotExist):
            return Response({"detail": "–ö–∞—Ä—Ç–∞ –∏–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"}, status=404)
        except Exception as e:
            return Response({"error": str(e)}, status=400)